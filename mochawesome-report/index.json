{
  "stats": {
    "suites": 10,
    "tests": 43,
    "passes": 15,
    "pending": 28,
    "failures": 0,
    "start": "2020-11-13T10:04:06.366Z",
    "end": "2020-11-13T10:04:08.127Z",
    "duration": 1761,
    "testsRegistered": 43,
    "passPercent": 100,
    "pendingPercent": 65.11627906976744,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a687e1b9-9413-4249-afd0-dc9adc3da826",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8e876d46-be87-4478-8a48-0ab0bff76988",
          "title": "Treasury Smart Contract Tests",
          "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
          "file": "/test/treasury.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f18c475f-7c95-4417-932e-d9abf9a684f9",
              "title": "Connect to Zilliqa Blockchain",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should run on node version v10",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should run on node version v10",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const node_version = process.version;\nconst ok = (node_version.substring(0,4) == nodeVersion);\nexpect(ok).to.be.true;",
                  "err": {},
                  "uuid": "d5c4e632-dca2-4a32-9803-dece34366cb2",
                  "parentUUID": "f18c475f-7c95-4417-932e-d9abf9a684f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should connect to the blockchain and get the right chain_id",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should connect to the blockchain and get the right chain_id",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "zilliqa = new Zilliqa(network);\nconst network_id = await zilliqa.network.GetNetworkId();\nconst id = parseInt(network_id.result)\nexpect(id).to.equal(chain_id)",
                  "err": {},
                  "uuid": "6ee7d0e3-7e6f-47ac-bc9c-8f52656f455e",
                  "parentUUID": "f18c475f-7c95-4417-932e-d9abf9a684f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have the right test account",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should have the right test account",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "zilliqa.wallet.addByPrivateKey(adminPrivateKey);\naddress = getAddressFromPrivateKey(adminPrivateKey).toLowerCase();\nconst ok = addressEqual(address, adminAddress);\nexpect(ok).to.be.true;",
                  "err": {},
                  "uuid": "fa6dc739-dc17-4781-8e91-13564c04bc34",
                  "parentUUID": "f18c475f-7c95-4417-932e-d9abf9a684f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have at least 10 ZIL in the account",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should have at least 10 ZIL in the account",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bal_obj = await zilliqa.blockchain.getBalance(address);\nconst balance_BN = new BN(bal_obj.result.balance);\nconst min_amount_BN = units.toQa(10, units.Units.Zil);\nconst ok = balance_BN.gte(min_amount_BN);\nexpect(ok).to.be.true;",
                  "err": {},
                  "uuid": "67f7e7e1-afc2-43ea-be4c-800eda1514fc",
                  "parentUUID": "f18c475f-7c95-4417-932e-d9abf9a684f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5c4e632-dca2-4a32-9803-dece34366cb2",
                "6ee7d0e3-7e6f-47ac-bc9c-8f52656f455e",
                "fa6dc739-dc17-4781-8e91-13564c04bc34",
                "67f7e7e1-afc2-43ea-be4c-800eda1514fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 156,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "183fd71d-a64f-4ba6-9d05-356dd696cc52",
              "title": "Deployment Checks",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should read contract source",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should read contract source",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let ok = false;\n      try {\n          code = fs.readFileSync('contracts/treasury.scilla', 'utf-8');\n          ok = true;\n      } catch (err) {\n        throw err \n      }\n      expect(ok).to.be.true;",
                  "err": {},
                  "uuid": "eabe5ff8-3ed2-471e-b468-529a83d52b28",
                  "parentUUID": "183fd71d-a64f-4ba6-9d05-356dd696cc52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should deploy the contract",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should deploy the contract",
                  "timedOut": false,
                  "duration": 411,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(timeout_deploy);\nthis.slow(timeout_deploy / 2);\nconst MSG_VERSION = 1;\nconst VERSION = bytes.pack(chain_id, MSG_VERSION);\nconst myGasPrice = units.toQa('1000', units.Units.Li);\nconst init = [\n  { vname: '_scilla_version', type: 'Uint32', value: '0'},\n  { vname: 'init_admin', type:  'ByStr20', value: address },\n  { vname: 'init_company', type:  'ByStr20', value: address },\n  { vname: 'proxy_address', type:  'ByStr20', value: address },\n  { vname: 'token_address', type:  'ByStr20', value: address },\n  { vname: 'base_value', type:  'Uint128', value: baseValue }\n];\nconst contract = zilliqa.contracts.new(code, init);\n[deployTx, treasury] = await contract.deploy({\n  version: VERSION,\n  gasPrice: myGasPrice,\n  gasLimit: Long.fromNumber(15000),\n});\n//console.log(deployTx);\nconsole.log(\"        contract address =\", treasury.address);\nexpect(deployTx.txParams.receipt.success).to.be.true;",
                  "err": {},
                  "uuid": "b77f2672-1b0f-4858-b561-d92000e5445a",
                  "parentUUID": "183fd71d-a64f-4ba6-9d05-356dd696cc52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct admin address",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct admin address",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "allState = await treasury.getState();\nexpect(allState.admin).to.equal(address)",
                  "err": {},
                  "uuid": "8ca8564c-eb71-4d6f-9e53-84312b6e82e2",
                  "parentUUID": "183fd71d-a64f-4ba6-9d05-356dd696cc52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct company address",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct company address",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(allState.company).to.equal(address)",
                  "err": {},
                  "uuid": "0ce231e8-ecbb-4fdb-8367-19592f5ce43d",
                  "parentUUID": "183fd71d-a64f-4ba6-9d05-356dd696cc52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct base price",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct base price",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bn_price = new BN(allState.token_price);\nexpect(bn_price).to.deep.equal(units.toQa(baseValue, units.Units.Zil))",
                  "err": {},
                  "uuid": "528e52f6-d547-4f83-84bc-471434f34f9f",
                  "parentUUID": "183fd71d-a64f-4ba6-9d05-356dd696cc52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be \"paused\" on contract creation",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should be \"paused\" on contract creation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(allState.paused.constructor).to.equal('True')",
                  "err": {},
                  "uuid": "3ef58b54-c3da-4e96-8538-2ccf985cdf0f",
                  "parentUUID": "183fd71d-a64f-4ba6-9d05-356dd696cc52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not be \"under funded\" on contract creation",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should not be \"under funded\" on contract creation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(allState.under_funded.constructor).to.equal('False')",
                  "err": {},
                  "uuid": "e28d2398-2806-4984-928a-fc32752bea34",
                  "parentUUID": "183fd71d-a64f-4ba6-9d05-356dd696cc52",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eabe5ff8-3ed2-471e-b468-529a83d52b28",
                "b77f2672-1b0f-4858-b561-d92000e5445a",
                "8ca8564c-eb71-4d6f-9e53-84312b6e82e2",
                "0ce231e8-ecbb-4fdb-8367-19592f5ce43d",
                "528e52f6-d547-4f83-84bc-471434f34f9f",
                "3ef58b54-c3da-4e96-8538-2ccf985cdf0f",
                "e28d2398-2806-4984-928a-fc32752bea34"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 449,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a313802c-3ed0-41b7-a78a-2cbea751826b",
              "title": "Contract Tests",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get the treasury_api",
                  "fullTitle": "Treasury Smart Contract Tests Contract Tests should get the treasury_api",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "treasury_api = new TreasuryAPI(treasury, chain_id);\nexpect(treasury_api).be.instanceOf(TreasuryAPI);",
                  "err": {},
                  "uuid": "39f7195b-15dc-4164-a48a-c6aaef43aba0",
                  "parentUUID": "a313802c-3ed0-41b7-a78a-2cbea751826b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "318d16aa-ff89-42e6-b911-c022bc8d210a",
                  "title": "Management Functions",
                  "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                  "file": "/test/treasury.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "6338be90-1f41-4187-9fcc-c9e190f72c16",
                      "title": "Pausing Related Transitions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow admin to unpause when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should allow admin to unpause when paused",
                          "timedOut": false,
                          "duration": 238,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.unpauseContract();\nexpect(receipt.success).to.be.true;",
                          "err": {},
                          "uuid": "263329c9-1436-409c-9d2e-c7c1b8d39310",
                          "parentUUID": "6338be90-1f41-4187-9fcc-c9e190f72c16",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow admin to pause when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should allow admin to pause when unpaused",
                          "timedOut": false,
                          "duration": 319,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.pauseContract();\n//console.log(receipt);\nexpect(receipt.success).to.be.true;",
                          "err": {},
                          "uuid": "e27569c8-c596-43b5-9399-3799b7178ba0",
                          "parentUUID": "6338be90-1f41-4187-9fcc-c9e190f72c16",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow unpausing if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should not allow unpausing if not admin",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "36c6cf2b-ebf9-472f-982f-261ad5bc0d97",
                          "parentUUID": "6338be90-1f41-4187-9fcc-c9e190f72c16",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow pausing if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should not allow pausing if not admin",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "8ffeb86c-3b9d-4955-bab7-d95ec2638282",
                          "parentUUID": "6338be90-1f41-4187-9fcc-c9e190f72c16",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "263329c9-1436-409c-9d2e-c7c1b8d39310",
                        "e27569c8-c596-43b5-9399-3799b7178ba0"
                      ],
                      "failures": [],
                      "pending": [
                        "36c6cf2b-ebf9-472f-982f-261ad5bc0d97",
                        "8ffeb86c-3b9d-4955-bab7-d95ec2638282"
                      ],
                      "skipped": [],
                      "duration": 557,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "060f8dad-b46b-48dd-80b4-fa674ab23fd6",
                      "title": "Admin Related Transitions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow admin to change admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should allow admin to change admin",
                          "timedOut": false,
                          "duration": 416,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "//make sure we are calling with current admin\n          zilliqa.wallet.addByPrivateKey(adminPrivateKey);\n          // test invalid address fails\n          const receipt1 = await treasury_api.changeAdmin(\"InvalidAddress\");\n          expect(receipt1.success).to.be.false;\n          // test valid address succeeds\n          const receipt2 = await treasury_api.changeAdmin(nonAdminAddress);\n          expect(receipt2.success).to.be.true;",
                          "err": {},
                          "uuid": "07795054-3c94-424c-afa7-430dbdc7be6e",
                          "parentUUID": "060f8dad-b46b-48dd-80b4-fa674ab23fd6",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow changing admin if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should not allow changing admin if not admin",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "d2b2a467-cfb9-4b2a-a8b8-ba54c76164b1",
                          "parentUUID": "060f8dad-b46b-48dd-80b4-fa674ab23fd6",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow admin to change company",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should allow admin to change company",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "26d15afd-0770-4398-8769-161cf67d609b",
                          "parentUUID": "060f8dad-b46b-48dd-80b4-fa674ab23fd6",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow changing company if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should not allow changing company if not admin",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "a29d7429-81a6-4e9c-ad7b-45a56a860d18",
                          "parentUUID": "060f8dad-b46b-48dd-80b4-fa674ab23fd6",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "07795054-3c94-424c-afa7-430dbdc7be6e"
                      ],
                      "failures": [],
                      "pending": [
                        "d2b2a467-cfb9-4b2a-a8b8-ba54c76164b1",
                        "26d15afd-0770-4398-8769-161cf67d609b",
                        "a29d7429-81a6-4e9c-ad7b-45a56a860d18"
                      ],
                      "skipped": [],
                      "duration": 416,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "18ae2f8d-09ef-41fc-9cb7-bbb58aa5ef9d",
                      "title": "Internal Functions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should recalculate exchange rates when receiving ZIL that is not for buying tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Internal Functions should recalculate exchange rates when receiving ZIL that is not for buying tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "4628d699-51f5-4b7b-a3f5-d6bd2b76e4e3",
                          "parentUUID": "18ae2f8d-09ef-41fc-9cb7-bbb58aa5ef9d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should recalculate exchange rates when receiving TOKENS that is not for paying invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Internal Functions should recalculate exchange rates when receiving TOKENS that is not for paying invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "110590ff-6940-454f-93ea-043ac0275061",
                          "parentUUID": "18ae2f8d-09ef-41fc-9cb7-bbb58aa5ef9d",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "4628d699-51f5-4b7b-a3f5-d6bd2b76e4e3",
                        "110590ff-6940-454f-93ea-043ac0275061"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "1049b92c-bc86-4d30-9d6a-2259a5068f7a",
                      "title": "Trading Features",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should not allow buying of tokens when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow buying of tokens when paused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "c3924d11-dadd-4ccc-b049-b8cc9da3200d",
                          "parentUUID": "1049b92c-bc86-4d30-9d6a-2259a5068f7a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow selling of tokens when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow selling of tokens when paused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "f80bea57-1e33-4a97-b2fa-2e37b6020600",
                          "parentUUID": "1049b92c-bc86-4d30-9d6a-2259a5068f7a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow buying of tokens when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should allow buying of tokens when unpaused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "82417187-e0bc-469b-b014-8ed707a37a64",
                          "parentUUID": "1049b92c-bc86-4d30-9d6a-2259a5068f7a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow selling of tokens when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should allow selling of tokens when unpaused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "ef296ee6-da52-4c80-8749-67bcc66fc069",
                          "parentUUID": "1049b92c-bc86-4d30-9d6a-2259a5068f7a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow selling more tokens than you have",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow selling more tokens than you have",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "660ca9f9-064b-4662-97ad-d4924b901569",
                          "parentUUID": "1049b92c-bc86-4d30-9d6a-2259a5068f7a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should issue correct amount of tokens when buying tokens with 1 ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should issue correct amount of tokens when buying tokens with 1 ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "2158c818-cb01-40d9-b6c0-199017ce8351",
                          "parentUUID": "1049b92c-bc86-4d30-9d6a-2259a5068f7a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should send the correct amount of ZIL to you after selling tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should send the correct amount of ZIL to you after selling tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "d102acc3-e383-4ffc-9099-d79a52f38a10",
                          "parentUUID": "1049b92c-bc86-4d30-9d6a-2259a5068f7a",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "c3924d11-dadd-4ccc-b049-b8cc9da3200d",
                        "f80bea57-1e33-4a97-b2fa-2e37b6020600",
                        "82417187-e0bc-469b-b014-8ed707a37a64",
                        "ef296ee6-da52-4c80-8749-67bcc66fc069",
                        "660ca9f9-064b-4662-97ad-d4924b901569",
                        "2158c818-cb01-40d9-b6c0-199017ce8351",
                        "d102acc3-e383-4ffc-9099-d79a52f38a10"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "2f73e9ab-eaa8-42e3-b658-1b9ee7b540e7",
                      "title": "Invoicing Features",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow creating new invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow creating new invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "08df921c-e08f-4134-aa3b-7339c887d389",
                          "parentUUID": "2f73e9ab-eaa8-42e3-b658-1b9ee7b540e7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should only allow admin to cancel an invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should only allow admin to cancel an invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "3c69143d-1231-4a31-9bb1-f144f191cd12",
                          "parentUUID": "2f73e9ab-eaa8-42e3-b658-1b9ee7b540e7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should error when trying to cancel an invoice that does not exist",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should error when trying to cancel an invoice that does not exist",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "bb0978de-3848-4291-ba14-42027dd8bcae",
                          "parentUUID": "2f73e9ab-eaa8-42e3-b658-1b9ee7b540e7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be partially paid with tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be partially paid with tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "929ff5dc-6180-47e7-8161-fcc6951ee75e",
                          "parentUUID": "2f73e9ab-eaa8-42e3-b658-1b9ee7b540e7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be paid in full with tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be paid in full with tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "95c145a5-79d0-4118-89de-87c8498ca050",
                          "parentUUID": "2f73e9ab-eaa8-42e3-b658-1b9ee7b540e7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be partially paid with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be partially paid with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "aa33ea84-294f-477c-a18c-a808c9f4dc4e",
                          "parentUUID": "2f73e9ab-eaa8-42e3-b658-1b9ee7b540e7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be paid in full with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be paid in full with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "91c1a830-34d5-4328-93ee-b52c0df36c57",
                          "parentUUID": "2f73e9ab-eaa8-42e3-b658-1b9ee7b540e7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be partially paid with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be partially paid with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "ae6383a6-ae3b-45dd-9ed4-8990a816320c",
                          "parentUUID": "2f73e9ab-eaa8-42e3-b658-1b9ee7b540e7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be paid in full with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be paid in full with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "6331a809-0fe1-412d-bd06-96e9c15cb146",
                          "parentUUID": "2f73e9ab-eaa8-42e3-b658-1b9ee7b540e7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should issue new tokens if invoice is overpaid with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should issue new tokens if invoice is overpaid with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "592df94a-0183-4193-9840-fbb9a350d4c4",
                          "parentUUID": "2f73e9ab-eaa8-42e3-b658-1b9ee7b540e7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be overpaid with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be overpaid with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "62f82690-3837-42f9-879f-f89effdb97b1",
                          "parentUUID": "2f73e9ab-eaa8-42e3-b658-1b9ee7b540e7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow multiple payments against an invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow multiple payments against an invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "ef8fd496-389a-4aeb-a052-bbd873d5a0e7",
                          "parentUUID": "2f73e9ab-eaa8-42e3-b658-1b9ee7b540e7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should only consume the correct amount of tokens when invoice is overpaid",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should only consume the correct amount of tokens when invoice is overpaid",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "8efa4022-dcd8-4a01-a789-2cc15e5448a7",
                          "parentUUID": "2f73e9ab-eaa8-42e3-b658-1b9ee7b540e7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow payments against fully paid invoices",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should not allow payments against fully paid invoices",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "111642a2-d966-4ed5-966d-40852475713d",
                          "parentUUID": "2f73e9ab-eaa8-42e3-b658-1b9ee7b540e7",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "08df921c-e08f-4134-aa3b-7339c887d389",
                        "3c69143d-1231-4a31-9bb1-f144f191cd12",
                        "bb0978de-3848-4291-ba14-42027dd8bcae",
                        "929ff5dc-6180-47e7-8161-fcc6951ee75e",
                        "95c145a5-79d0-4118-89de-87c8498ca050",
                        "aa33ea84-294f-477c-a18c-a808c9f4dc4e",
                        "91c1a830-34d5-4328-93ee-b52c0df36c57",
                        "ae6383a6-ae3b-45dd-9ed4-8990a816320c",
                        "6331a809-0fe1-412d-bd06-96e9c15cb146",
                        "592df94a-0183-4193-9840-fbb9a350d4c4",
                        "62f82690-3837-42f9-879f-f89effdb97b1",
                        "ef8fd496-389a-4aeb-a052-bbd873d5a0e7",
                        "8efa4022-dcd8-4a01-a789-2cc15e5448a7",
                        "111642a2-d966-4ed5-966d-40852475713d"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 100000
                }
              ],
              "passes": [
                "39f7195b-15dc-4164-a48a-c6aaef43aba0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "quiet": "true",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}