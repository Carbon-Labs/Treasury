{
  "stats": {
    "suites": 10,
    "tests": 39,
    "passes": 13,
    "pending": 26,
    "failures": 0,
    "start": "2020-11-14T11:24:43.714Z",
    "end": "2020-11-14T11:24:45.850Z",
    "duration": 2136,
    "testsRegistered": 39,
    "passPercent": 100,
    "pendingPercent": 66.66666666666666,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "143d0bd7-3d17-4293-a6aa-9f060041558c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 481,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "zilliqa = new Zilliqa(network);\nnetwork_id = await zilliqa.network.GetNetworkId();\n// Check that we are using correct address\nzilliqa.wallet.addByPrivateKey(adminPrivateKey);\naddress = getAddressFromPrivateKey(adminPrivateKey).toLowerCase();\nconst addressCheck = addressEqual(address, adminAddress);\nexpect(addressCheck).to.be.true;\n// Check address has at least 100 ZIL\nconst bal_obj = await zilliqa.blockchain.getBalance(address);\nconst balance_BN = new BN(bal_obj.result.balance);\nconst min_amount_BN = units.toQa(100, units.Units.Zil);\nlet ok = balance_BN.gte(min_amount_BN);\nexpect(ok).to.be.true;\n// Read contract address\nok = false;\ntry {\n  code = fs.readFileSync('contracts/treasury.scilla', 'utf-8');\n  ok = true;\n} catch (err) {\n  throw err \n}\nexpect(ok).to.be.true;\n// Deploy the contract\nthis.timeout(timeout_deploy);\nthis.slow(timeout_deploy / 2);\nconst MSG_VERSION = 1;\nconst VERSION = bytes.pack(chain_id, MSG_VERSION);\nconst myGasPrice = units.toQa('1000', units.Units.Li);\nconst init = [\n  { vname: '_scilla_version', type: 'Uint32', value: '0'},\n  { vname: 'init_admin', type:  'ByStr20', value: address },\n  { vname: 'init_company', type:  'ByStr20', value: address },\n  { vname: 'proxy_address', type:  'ByStr20', value: address },\n  { vname: 'token_address', type:  'ByStr20', value: address },\n  { vname: 'base_value', type:  'Uint128', value: baseValue }\n];\nconst contract = zilliqa.contracts.new(code, init);\n[deployTx, treasury] = await contract.deploy({\n  version: VERSION,\n  gasPrice: myGasPrice,\n  gasLimit: Long.fromNumber(15000),\n});\nconsole.log(\"Deployed Contract Address =\", treasury.address);\nexpect(deployTx.txParams.receipt.success).to.be.true;\ntreasury_api = new TreasuryAPI(treasury, chain_id);\nexpect(treasury_api).be.instanceOf(TreasuryAPI);",
          "err": {},
          "uuid": "ba4a141e-940b-45ab-82ab-382d579cf100",
          "parentUUID": "143d0bd7-3d17-4293-a6aa-9f060041558c",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 6,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "//Reset admin\n  await treasury_api.setSigningAddress(adminPrivateKey);\n  //Ensure contract is unpaused",
          "err": {},
          "uuid": "f92d9578-e83b-4406-a2a7-0c49946af3ac",
          "parentUUID": "143d0bd7-3d17-4293-a6aa-9f060041558c",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4232be73-b073-4fb3-a789-48469d6f29f2",
          "title": "Treasury Smart Contract Tests",
          "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
          "file": "/test/treasury.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7d872acc-478d-445e-a39b-3e04203b77cd",
              "title": "Connect to Zilliqa Blockchain",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should run on node version v10",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should run on node version v10",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const node_version = process.version;\nconst nodeVersionCheck = (node_version.substring(0,4) == nodeVersion);\nexpect(nodeVersionCheck).to.be.true;",
                  "err": {},
                  "uuid": "42abebbd-0f12-4099-b242-a90c9901257a",
                  "parentUUID": "7d872acc-478d-445e-a39b-3e04203b77cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should connect to the blockchain and get the right chain_id",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should connect to the blockchain and get the right chain_id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = parseInt(network_id.result)\nexpect(id).to.equal(chain_id)",
                  "err": {},
                  "uuid": "cc52c0be-0503-4424-b363-62bac5b05ef8",
                  "parentUUID": "7d872acc-478d-445e-a39b-3e04203b77cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42abebbd-0f12-4099-b242-a90c9901257a",
                "cc52c0be-0503-4424-b363-62bac5b05ef8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4ccfa4cc-bb89-4b11-ba1f-cad716e2d5af",
              "title": "Deployment Checks",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have correct admin address",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct admin address",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "allState = await treasury.getState();\nexpect(allState.admin).to.equal(address)",
                  "err": {},
                  "uuid": "7922819b-7a32-4032-bf68-3d2b444f4a8d",
                  "parentUUID": "4ccfa4cc-bb89-4b11-ba1f-cad716e2d5af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct company address",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct company address",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(allState.company).to.equal(address)",
                  "err": {},
                  "uuid": "4c7fb4c5-2dee-4f04-916d-b55501e2b3c3",
                  "parentUUID": "4ccfa4cc-bb89-4b11-ba1f-cad716e2d5af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct base price",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct base price",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bn_price = new BN(allState.token_price);\nexpect(bn_price).to.deep.equal(units.toQa(baseValue, units.Units.Zil))",
                  "err": {},
                  "uuid": "1ffbe6f9-c8b6-4c61-ac1f-21b800b81a72",
                  "parentUUID": "4ccfa4cc-bb89-4b11-ba1f-cad716e2d5af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be \"paused\" on contract creation",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should be \"paused\" on contract creation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(allState.paused.constructor).to.equal('True')",
                  "err": {},
                  "uuid": "6c264123-a157-4539-bd51-7130a0a7183c",
                  "parentUUID": "4ccfa4cc-bb89-4b11-ba1f-cad716e2d5af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not be \"under funded\" on contract creation",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should not be \"under funded\" on contract creation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(allState.under_funded.constructor).to.equal('False')",
                  "err": {},
                  "uuid": "126fb9df-b26b-4ff6-8020-1922f2d2d81a",
                  "parentUUID": "4ccfa4cc-bb89-4b11-ba1f-cad716e2d5af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7922819b-7a32-4032-bf68-3d2b444f4a8d",
                "4c7fb4c5-2dee-4f04-916d-b55501e2b3c3",
                "1ffbe6f9-c8b6-4c61-ac1f-21b800b81a72",
                "6c264123-a157-4539-bd51-7130a0a7183c",
                "126fb9df-b26b-4ff6-8020-1922f2d2d81a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 22,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "47f3a18e-0324-4c45-84e8-8c4fdbaada95",
              "title": "Contract Tests",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get the treasury_api",
                  "fullTitle": "Treasury Smart Contract Tests Contract Tests should get the treasury_api",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "37b56be7-4eba-4b76-af78-3ba4635ad25d",
                  "parentUUID": "47f3a18e-0324-4c45-84e8-8c4fdbaada95",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "60250a64-3324-4b0b-a1c3-889dded8977b",
                  "title": "Management Functions",
                  "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                  "file": "/test/treasury.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "0aac7edb-9dc6-4712-95f9-5e5121675f62",
                      "title": "Pausing Related Transitions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow admin to unpause when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should allow admin to unpause when paused",
                          "timedOut": false,
                          "duration": 180,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.unpauseContract();\nexpect(receipt.success).to.be.true;",
                          "err": {},
                          "uuid": "135a9261-1ab2-431e-844b-0899efbadf05",
                          "parentUUID": "0aac7edb-9dc6-4712-95f9-5e5121675f62",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow admin to pause when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should allow admin to pause when unpaused",
                          "timedOut": false,
                          "duration": 171,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.pauseContract();\n//console.log(receipt);\nexpect(receipt.success).to.be.true;",
                          "err": {},
                          "uuid": "a35f2ea6-be37-49b4-9c2f-4345c73a5bb1",
                          "parentUUID": "0aac7edb-9dc6-4712-95f9-5e5121675f62",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow unpausing if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should not allow unpausing if not admin",
                          "timedOut": false,
                          "duration": 211,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await treasury_api.setSigningAddress(nonAdminPrivateKey)\nconst receipt = await treasury_api.unpauseContract();\nexpect(receipt.success).to.be.false;",
                          "err": {},
                          "uuid": "ff1f9c0d-799b-4904-a4cd-5a3ba4de35ac",
                          "parentUUID": "0aac7edb-9dc6-4712-95f9-5e5121675f62",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow pausing if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should not allow pausing if not admin",
                          "timedOut": false,
                          "duration": 493,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// we need to unpause the contract again first\nconst receipt1 = await treasury_api.unpauseContract();\nexpect(receipt1.success).to.be.true;\n//\nawait treasury_api.setSigningAddress(nonAdminPrivateKey)\n/* this is a bad test as it could be false for wrong reason, i.e already paused */\n/* need to check for correct error code */\nconst receipt2 = await treasury_api.pauseContract();\nexpect(receipt2.success).to.be.false;",
                          "err": {},
                          "uuid": "4f000c67-d18d-4dd5-806b-853907a37b80",
                          "parentUUID": "0aac7edb-9dc6-4712-95f9-5e5121675f62",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "135a9261-1ab2-431e-844b-0899efbadf05",
                        "a35f2ea6-be37-49b4-9c2f-4345c73a5bb1",
                        "ff1f9c0d-799b-4904-a4cd-5a3ba4de35ac",
                        "4f000c67-d18d-4dd5-806b-853907a37b80"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1055,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "2bfd1bcd-8246-482e-8f78-aea33b623cce",
                      "title": "Admin Related Transitions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow admin to change admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should allow admin to change admin",
                          "timedOut": false,
                          "duration": 237,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "//make sure we are calling with current admin\n          zilliqa.wallet.addByPrivateKey(adminPrivateKey);\n          // test invalid address fails\n          const receipt1 = await treasury_api.changeAdmin(\"InvalidAddress\");\n          expect(receipt1.success).to.be.false;\n          // test valid address succeeds\n          const receipt2 = await treasury_api.changeAdmin(nonAdminAddress);\n          expect(receipt2.success).to.be.true;",
                          "err": {},
                          "uuid": "484f7d97-c2e7-40db-b336-acd84be6db07",
                          "parentUUID": "2bfd1bcd-8246-482e-8f78-aea33b623cce",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow changing admin if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should not allow changing admin if not admin",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "aedfd9f1-bda2-4170-89f9-5e693bdf4d6c",
                          "parentUUID": "2bfd1bcd-8246-482e-8f78-aea33b623cce",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow admin to change company",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should allow admin to change company",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "cdabb671-4f0b-4052-b516-6131dbdc7165",
                          "parentUUID": "2bfd1bcd-8246-482e-8f78-aea33b623cce",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow changing company if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should not allow changing company if not admin",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "291f8bbf-7dcd-4cd5-84ca-d41cc5639c03",
                          "parentUUID": "2bfd1bcd-8246-482e-8f78-aea33b623cce",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "484f7d97-c2e7-40db-b336-acd84be6db07"
                      ],
                      "failures": [],
                      "pending": [
                        "aedfd9f1-bda2-4170-89f9-5e693bdf4d6c",
                        "cdabb671-4f0b-4052-b516-6131dbdc7165",
                        "291f8bbf-7dcd-4cd5-84ca-d41cc5639c03"
                      ],
                      "skipped": [],
                      "duration": 237,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "cf51eb22-16b8-4597-9772-56041dee6621",
                      "title": "Internal Functions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should recalculate exchange rates when receiving ZIL that is not for buying tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Internal Functions should recalculate exchange rates when receiving ZIL that is not for buying tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "e76f0803-3083-476c-91eb-05174a580a4e",
                          "parentUUID": "cf51eb22-16b8-4597-9772-56041dee6621",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should recalculate exchange rates when receiving TOKENS that is not for paying invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Internal Functions should recalculate exchange rates when receiving TOKENS that is not for paying invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "871e848c-0c26-4277-9417-4fad5d38e81d",
                          "parentUUID": "cf51eb22-16b8-4597-9772-56041dee6621",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "e76f0803-3083-476c-91eb-05174a580a4e",
                        "871e848c-0c26-4277-9417-4fad5d38e81d"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "a4cab7db-338b-4dc9-8d5c-e4ef6213beda",
                      "title": "Trading Features",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should not allow buying of tokens when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow buying of tokens when paused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "f3ed2953-b96e-4f5c-90e3-9d6fa925384c",
                          "parentUUID": "a4cab7db-338b-4dc9-8d5c-e4ef6213beda",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow selling of tokens when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow selling of tokens when paused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "a7a797fa-63af-4eb9-a463-c3bc4618d8bc",
                          "parentUUID": "a4cab7db-338b-4dc9-8d5c-e4ef6213beda",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow buying of tokens when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should allow buying of tokens when unpaused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "dd17af0a-9a3a-4fdf-bbef-b1aaa237ee8f",
                          "parentUUID": "a4cab7db-338b-4dc9-8d5c-e4ef6213beda",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow selling of tokens when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should allow selling of tokens when unpaused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "de28b3da-058e-4551-b555-8ff0495e7190",
                          "parentUUID": "a4cab7db-338b-4dc9-8d5c-e4ef6213beda",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow selling more tokens than you have",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow selling more tokens than you have",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "daa772f5-0a5e-4464-931c-84a9a03fb977",
                          "parentUUID": "a4cab7db-338b-4dc9-8d5c-e4ef6213beda",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should issue correct amount of tokens when buying tokens with 1 ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should issue correct amount of tokens when buying tokens with 1 ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "c2fb9323-4a69-45ce-9485-78232a626e1e",
                          "parentUUID": "a4cab7db-338b-4dc9-8d5c-e4ef6213beda",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should send the correct amount of ZIL to you after selling tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should send the correct amount of ZIL to you after selling tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "156b6c94-af33-4fdb-b05a-c176c8fe8e03",
                          "parentUUID": "a4cab7db-338b-4dc9-8d5c-e4ef6213beda",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "f3ed2953-b96e-4f5c-90e3-9d6fa925384c",
                        "a7a797fa-63af-4eb9-a463-c3bc4618d8bc",
                        "dd17af0a-9a3a-4fdf-bbef-b1aaa237ee8f",
                        "de28b3da-058e-4551-b555-8ff0495e7190",
                        "daa772f5-0a5e-4464-931c-84a9a03fb977",
                        "c2fb9323-4a69-45ce-9485-78232a626e1e",
                        "156b6c94-af33-4fdb-b05a-c176c8fe8e03"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "2b5432e8-b1ca-4a75-938a-20c71d267430",
                      "title": "Invoicing Features",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow creating new invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow creating new invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "8dee18cf-710e-497d-915c-807b7b7c48f4",
                          "parentUUID": "2b5432e8-b1ca-4a75-938a-20c71d267430",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should only allow admin to cancel an invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should only allow admin to cancel an invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "3e140a0c-45e6-4294-a0d4-d1956e1dba95",
                          "parentUUID": "2b5432e8-b1ca-4a75-938a-20c71d267430",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should error when trying to cancel an invoice that does not exist",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should error when trying to cancel an invoice that does not exist",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "d61966f4-b912-46d0-bf87-527b091651f0",
                          "parentUUID": "2b5432e8-b1ca-4a75-938a-20c71d267430",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be partially paid with tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be partially paid with tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "f80aa21f-c36f-44a9-90d0-a6a8aada9505",
                          "parentUUID": "2b5432e8-b1ca-4a75-938a-20c71d267430",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be paid in full with tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be paid in full with tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "7889a0f5-68e9-40ce-a985-feaccc6ef01f",
                          "parentUUID": "2b5432e8-b1ca-4a75-938a-20c71d267430",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be partially paid with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be partially paid with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "07c3a031-c934-4cac-aff5-e9ffc7650462",
                          "parentUUID": "2b5432e8-b1ca-4a75-938a-20c71d267430",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be paid in full with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be paid in full with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "7b2314c2-a140-4cb4-a460-e77b83051a7a",
                          "parentUUID": "2b5432e8-b1ca-4a75-938a-20c71d267430",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be partially paid with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be partially paid with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "69b36d83-befd-4e97-ba6c-609828081af3",
                          "parentUUID": "2b5432e8-b1ca-4a75-938a-20c71d267430",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be paid in full with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be paid in full with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "fa4ce941-6477-4631-b7f3-1facc1d4ca2a",
                          "parentUUID": "2b5432e8-b1ca-4a75-938a-20c71d267430",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should issue new tokens if invoice is overpaid with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should issue new tokens if invoice is overpaid with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "1ef0da2b-b7d8-4110-add5-1f38306fc36c",
                          "parentUUID": "2b5432e8-b1ca-4a75-938a-20c71d267430",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be overpaid with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be overpaid with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "755b6027-48d9-4f83-a0b4-0eeb8398f21c",
                          "parentUUID": "2b5432e8-b1ca-4a75-938a-20c71d267430",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow multiple payments against an invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow multiple payments against an invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "c4c8e6c1-651a-4982-8977-3625e3556710",
                          "parentUUID": "2b5432e8-b1ca-4a75-938a-20c71d267430",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should only consume the correct amount of tokens when invoice is overpaid",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should only consume the correct amount of tokens when invoice is overpaid",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "4b7edbfa-a4df-4966-a3ac-dfa6356bc7b6",
                          "parentUUID": "2b5432e8-b1ca-4a75-938a-20c71d267430",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow payments against fully paid invoices",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should not allow payments against fully paid invoices",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "c2d3d4f5-43fa-4fdf-a4bf-b5bd7cebadff",
                          "parentUUID": "2b5432e8-b1ca-4a75-938a-20c71d267430",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "8dee18cf-710e-497d-915c-807b7b7c48f4",
                        "3e140a0c-45e6-4294-a0d4-d1956e1dba95",
                        "d61966f4-b912-46d0-bf87-527b091651f0",
                        "f80aa21f-c36f-44a9-90d0-a6a8aada9505",
                        "7889a0f5-68e9-40ce-a985-feaccc6ef01f",
                        "07c3a031-c934-4cac-aff5-e9ffc7650462",
                        "7b2314c2-a140-4cb4-a460-e77b83051a7a",
                        "69b36d83-befd-4e97-ba6c-609828081af3",
                        "fa4ce941-6477-4631-b7f3-1facc1d4ca2a",
                        "1ef0da2b-b7d8-4110-add5-1f38306fc36c",
                        "755b6027-48d9-4f83-a0b4-0eeb8398f21c",
                        "c4c8e6c1-651a-4982-8977-3625e3556710",
                        "4b7edbfa-a4df-4966-a3ac-dfa6356bc7b6",
                        "c2d3d4f5-43fa-4fdf-a4bf-b5bd7cebadff"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 100000
                }
              ],
              "passes": [
                "37b56be7-4eba-4b76-af78-3ba4635ad25d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "quiet": "true",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}