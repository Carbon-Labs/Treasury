{
  "stats": {
    "suites": 10,
    "tests": 39,
    "passes": 19,
    "pending": 20,
    "failures": 0,
    "start": "2020-11-20T02:18:48.559Z",
    "end": "2020-11-20T02:18:54.228Z",
    "duration": 5669,
    "testsRegistered": 39,
    "passPercent": 100,
    "pendingPercent": 51.28205128205128,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "aaab36c4-0e4e-4620-97ac-08b8c7deff0b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 753,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "zilliqa = new Zilliqa(network);\nnetwork_id = await zilliqa.network.GetNetworkId();\n// Check that we are using correct address\nzilliqa.wallet.addByPrivateKey(adminPrivateKey);\naddress = getAddressFromPrivateKey(adminPrivateKey).toLowerCase();\nconst addressCheck = addressEqual(address, adminAddress);\nexpect(addressCheck).to.be.true;\n// Check address has at least 10 ZIL\nconst bal_obj = await zilliqa.blockchain.getBalance(address);\nconst balance_BN = new BN(bal_obj.result.balance);\nconst min_amount_BN = units.toQa(10, units.Units.Zil);\nlet ok = balance_BN.gte(min_amount_BN);\nexpect(ok).to.be.true;\n// Read contract address\nok = false;\ntry {\n  code = fs.readFileSync('contracts/treasury.scilla', 'utf-8');\n  ok = true;\n} catch (err) {\n  throw err \n}\nexpect(ok).to.be.true;\n// Deploy the contract\nthis.timeout(timeout_deploy);\nthis.slow(timeout_deploy / 2);\nconst MSG_VERSION = 1;\nconst VERSION = bytes.pack(chain_id, MSG_VERSION);\nconst myGasPrice = units.toQa('1000', units.Units.Li);\nconst init = [\n  { vname: '_scilla_version', type: 'Uint32', value: '0'},\n  { vname: 'init_admin', type:  'ByStr20', value: address },\n  { vname: 'init_company', type:  'ByStr20', value: address },\n  { vname: 'proxy_address', type:  'ByStr20', value: address },\n  { vname: 'token_address', type:  'ByStr20', value: address },\n  { vname: 'base_value', type:  'Uint128', value: baseValue }\n];\nconst contract = zilliqa.contracts.new(code, init);\n[deployTx, treasury] = await contract.deploy({\n  version: VERSION,\n  gasPrice: myGasPrice,\n  gasLimit: Long.fromNumber(15000),\n});\nconsole.log(\"Deployed Contract Address =\", treasury.address);\nexpect(deployTx.txParams.receipt.success).to.be.true;\ntreasury_api = new TreasuryAPI(treasury, chain_id);\nexpect(treasury_api).be.instanceOf(TreasuryAPI);",
          "err": {},
          "uuid": "b0867c45-7771-4c89-b5b6-580c42cc2e35",
          "parentUUID": "aaab36c4-0e4e-4620-97ac-08b8c7deff0b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 105,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "//Reset admin\n  treasury_api.setSigningAddress(adminPrivateKey); //@todo - we need to read the current admin and do look up for private key\n  resp = await treasury_api.changeAdmin(adminAddress);\n  expect(resp.success).to.be.true;",
          "err": {},
          "uuid": "21fd2744-f8f6-44cd-b5ad-77c9a1a6d93d",
          "parentUUID": "aaab36c4-0e4e-4620-97ac-08b8c7deff0b",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3011033c-7be2-4e42-888d-a77af566ff5f",
          "title": "Treasury Smart Contract Tests",
          "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
          "file": "/test/treasury.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "73053d63-53fd-4c4d-a459-0ecbfa275fa9",
              "title": "Connect to Zilliqa Blockchain",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should run on node version v10",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should run on node version v10",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const node_version = process.version;\nconst nodeVersionCheck = (node_version.substring(0,4) == nodeVersion);\nexpect(nodeVersionCheck).to.be.true;",
                  "err": {},
                  "uuid": "771b2e88-7dab-4199-bf71-1abd0341323a",
                  "parentUUID": "73053d63-53fd-4c4d-a459-0ecbfa275fa9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should connect to the blockchain and get the right chain_id",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should connect to the blockchain and get the right chain_id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = parseInt(network_id.result)\nexpect(id).to.equal(chain_id)",
                  "err": {},
                  "uuid": "c457861e-882f-4197-ac37-73fe4db5a447",
                  "parentUUID": "73053d63-53fd-4c4d-a459-0ecbfa275fa9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "771b2e88-7dab-4199-bf71-1abd0341323a",
                "c457861e-882f-4197-ac37-73fe4db5a447"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "48782980-baee-46de-97d9-8796bba7d263",
              "title": "Deployment Checks",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have correct admin address",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct admin address",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contractAdminAddress = await treasury_api.getAdmin();\nexpect(contractAdminAddress).to.equal(address)",
                  "err": {},
                  "uuid": "60623a7c-c844-413b-89ba-a35f71a1b776",
                  "parentUUID": "48782980-baee-46de-97d9-8796bba7d263",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct company address",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct company address",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contractCompanyAddress = await treasury_api.getCompany();\nexpect(contractCompanyAddress).to.equal(address)",
                  "err": {},
                  "uuid": "4b19396b-a656-4466-81e2-d3c4af41e2b0",
                  "parentUUID": "48782980-baee-46de-97d9-8796bba7d263",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct base price",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct base price",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const price = await treasury_api.getTokenPrice();\nconst bn_price = new BN(price);\nexpect(bn_price).to.deep.equal(units.toQa(baseValue, units.Units.Zil))",
                  "err": {},
                  "uuid": "9e38293c-6759-4939-9cd9-770ad4c094e7",
                  "parentUUID": "48782980-baee-46de-97d9-8796bba7d263",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have 0 tokens",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have 0 tokens",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const num_tokens = await treasury_api.getTokenBalance();\nexpect(num_tokens).to.equal('0')",
                  "err": {},
                  "uuid": "c9f97202-aec8-4a8b-bdc7-8c2cced2e75b",
                  "parentUUID": "48782980-baee-46de-97d9-8796bba7d263",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be \"paused\" on contract creation",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should be \"paused\" on contract creation",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pausedStatus = await treasury_api.isPaused();\nexpect(pausedStatus).to.equal('True')",
                  "err": {},
                  "uuid": "46cde136-35e3-4fd1-bc3b-368a43805d4e",
                  "parentUUID": "48782980-baee-46de-97d9-8796bba7d263",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not be \"under funded\" on contract creation",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should not be \"under funded\" on contract creation",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fundedStatus = await treasury_api.isUnderFunded();\nexpect(fundedStatus).to.equal('False')",
                  "err": {},
                  "uuid": "0374386e-ad1c-41e7-99fa-e43468b8fdd6",
                  "parentUUID": "48782980-baee-46de-97d9-8796bba7d263",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60623a7c-c844-413b-89ba-a35f71a1b776",
                "4b19396b-a656-4466-81e2-d3c4af41e2b0",
                "9e38293c-6759-4939-9cd9-770ad4c094e7",
                "c9f97202-aec8-4a8b-bdc7-8c2cced2e75b",
                "46cde136-35e3-4fd1-bc3b-368a43805d4e",
                "0374386e-ad1c-41e7-99fa-e43468b8fdd6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 96,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d4297173-793a-4893-abef-f9bd0863de30",
              "title": "Contract Tests",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "2116c7d4-8574-4e8e-8cb0-9a3af43d7705",
                  "title": "Management Functions",
                  "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                  "file": "/test/treasury.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "4565d52e-c20b-474c-a551-338dd0a29ebd",
                      "title": "Pausing Related Transitions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow admin to unpause when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should allow admin to unpause when paused",
                          "timedOut": false,
                          "duration": 95,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.unpauseContract();\nexpect(receipt.success).to.be.true;",
                          "err": {},
                          "uuid": "ebce5995-f9bb-4fa0-8a03-6da61d07d91e",
                          "parentUUID": "4565d52e-c20b-474c-a551-338dd0a29ebd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow admin to pause when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should allow admin to pause when unpaused",
                          "timedOut": false,
                          "duration": 178,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.pauseContract();\nexpect(receipt.success).to.be.true;",
                          "err": {},
                          "uuid": "240e1ecf-0276-4691-a488-7f33184154e5",
                          "parentUUID": "4565d52e-c20b-474c-a551-338dd0a29ebd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow unpausing if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should not allow unpausing if not admin",
                          "timedOut": false,
                          "duration": 294,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "exceptionCode = 'Int32 -1';\n          const receipt = await treasury_api.pauseContract();         //make sure it is paused first\n          expect(receipt.success).to.be.true;\n          \n          await treasury_api.setSigningAddress(nonAdminPrivateKey)    // change txn signer to non adming...\n          const receipt2 = await treasury_api.unpauseContract();      // ...and attempt to unpause\n          \n          checkException(receipt2, exceptionCode);\n          expect(receipt2.success).to.be.false;                       // txn should have failed",
                          "err": {},
                          "uuid": "0a2ea1ef-1c58-4b92-affb-3919c038be5a",
                          "parentUUID": "4565d52e-c20b-474c-a551-338dd0a29ebd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow pausing if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should not allow pausing if not admin",
                          "timedOut": false,
                          "duration": 250,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "exceptionCode = 'Int32 -1';\nconst receipt = await treasury_api.unpauseContract();       //make sure it is unpaused first\nexpect(receipt.success).to.be.true;\n\nawait treasury_api.setSigningAddress(nonAdminPrivateKey)    // change txn signer to non adming...\nconst receipt2 = await treasury_api.pauseContract();        // ...and attempt to pause\n\ncheckException(receipt2, exceptionCode);\nexpect(receipt2.success).to.be.false;                       // txn should have failed",
                          "err": {},
                          "uuid": "bb66a85a-3100-4b9c-814d-db8c9ecb839f",
                          "parentUUID": "4565d52e-c20b-474c-a551-338dd0a29ebd",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "ebce5995-f9bb-4fa0-8a03-6da61d07d91e",
                        "240e1ecf-0276-4691-a488-7f33184154e5",
                        "0a2ea1ef-1c58-4b92-affb-3919c038be5a",
                        "bb66a85a-3100-4b9c-814d-db8c9ecb839f"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 817,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "57a43d8c-9dac-4e6b-80d1-e5c4574490e4",
                      "title": "Admin Related Transitions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow admin to change admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should allow admin to change admin",
                          "timedOut": false,
                          "duration": 321,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// test invalid address fails\n          const receipt1 = await treasury_api.changeAdmin(\"InvalidAddress\");\n          expect(receipt1.success).to.be.false;\n          // test valid address succeeds\n          const receipt2 = await treasury_api.changeAdmin(nonAdminAddress);\n          expect(receipt2.success).to.be.true; \n          //reset back to original admin\n          await treasury_api.setSigningAddress(nonAdminPrivateKey)          \n          const receipt3 = await treasury_api.changeAdmin(adminAddress);\n          expect(receipt3.success).to.be.true;",
                          "err": {},
                          "uuid": "5927f937-e49b-465b-a2a6-3cb88d9e51a5",
                          "parentUUID": "57a43d8c-9dac-4e6b-80d1-e5c4574490e4",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow changing admin if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should not allow changing admin if not admin",
                          "timedOut": false,
                          "duration": 114,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "exceptionCode = 'Int32 -1';          \n          await treasury_api.setSigningAddress(nonAdminPrivateKey)          // change txn signer to non admin...\n          const receipt2 = await treasury_api.changeAdmin(nonAdminAddress); // ...and attempt to change admin\n          //console.log(receipt2);\n          checkException(receipt2, exceptionCode);\n          \n          expect(receipt2.success).to.be.false;                             // txn should have failed",
                          "err": {},
                          "uuid": "3824b10c-dd43-41d5-ac59-bc63c5c82611",
                          "parentUUID": "57a43d8c-9dac-4e6b-80d1-e5c4574490e4",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow admin to change company",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should allow admin to change company",
                          "timedOut": false,
                          "duration": 111,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.changeCompany(nonAdminAddress);\n//console.log(receipt);\nexpect(receipt.success).to.be.true;\n//need to confirm that company address has been set correctly.\nconst contractCompanyAddress = await treasury_api.getCompany();\n//console.log(contractCompanyAddress);\nexpect(contractCompanyAddress).to.equal(nonAdminAddress);",
                          "err": {},
                          "uuid": "41eef471-5da3-4a9a-aa58-a9f2172e7daf",
                          "parentUUID": "57a43d8c-9dac-4e6b-80d1-e5c4574490e4",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow changing company if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should not allow changing company if not admin",
                          "timedOut": false,
                          "duration": 169,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "exceptionCode = 'Int32 -1';          \nawait treasury_api.setSigningAddress(nonAdminPrivateKey)          // change txn signer to non admin...\nconst receipt = await treasury_api.changeCompany(nonAdminAddress); // ...and attempt to change admin\ncheckException(receipt, exceptionCode);\n\nexpect(receipt.success).to.be.false;                             // txn should have failed",
                          "err": {},
                          "uuid": "21d79e77-26de-4fb9-8980-afa3c9587d6f",
                          "parentUUID": "57a43d8c-9dac-4e6b-80d1-e5c4574490e4",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "5927f937-e49b-465b-a2a6-3cb88d9e51a5",
                        "3824b10c-dd43-41d5-ac59-bc63c5c82611",
                        "41eef471-5da3-4a9a-aa58-a9f2172e7daf",
                        "21d79e77-26de-4fb9-8980-afa3c9587d6f"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 715,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "7f1a2c83-9924-409e-92ee-52cedb0d2cbb",
                      "title": "Internal Functions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should recalculate exchange rates when receiving ZIL that is not for buying tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Internal Functions should recalculate exchange rates when receiving ZIL that is not for buying tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "07cee823-b840-4ce9-a44a-eb4138f9b9a8",
                          "parentUUID": "7f1a2c83-9924-409e-92ee-52cedb0d2cbb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should recalculate exchange rates when receiving TOKENS that is not for paying invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Internal Functions should recalculate exchange rates when receiving TOKENS that is not for paying invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "c322cde9-e4f2-4bee-9c51-eef89fa73ac4",
                          "parentUUID": "7f1a2c83-9924-409e-92ee-52cedb0d2cbb",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "07cee823-b840-4ce9-a44a-eb4138f9b9a8",
                        "c322cde9-e4f2-4bee-9c51-eef89fa73ac4"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "7c888956-9889-4637-9313-3c2d65514279",
                      "title": "Trading Features",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should not allow buying of tokens when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow buying of tokens when paused",
                          "timedOut": false,
                          "duration": 228,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "//pause it first\n          const receipt2 = await treasury_api.pauseContract(); \n          expect(receipt2.success).to.be.true;\n          const zil_amount_BN = units.toQa(5, units.Units.Zil);\n          const receipt = await treasury_api.buyTokens(zil_amount_BN);\n          //check error is due to being 'paused'\n          exceptionCode = 'Int32 -5'\n          checkException(receipt, exceptionCode);\n          expect(receipt.success).to.be.false;",
                          "err": {},
                          "uuid": "f3c404c1-87e6-419c-ae81-42cdb7747e6d",
                          "parentUUID": "7c888956-9889-4637-9313-3c2d65514279",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow selling of tokens when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow selling of tokens when paused",
                          "timedOut": false,
                          "duration": 211,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "//pause it first\nconst receipt2 = await treasury_api.pauseContract(); \nexpect(receipt2.success).to.be.true;\n//const zil_amount_BN = units.toQa(5, units.Units.Zil);\nconst receipt = await treasury_api.sellTokens();\n//check error is due to being 'paused'\nexceptionCode = 'Int32 -5'\ncheckException(receipt, exceptionCode);\n//console.log(receipt);\nexpect(receipt.success).to.be.false;",
                          "err": {},
                          "uuid": "21c8e368-5eae-4105-a9be-a46b02f7040e",
                          "parentUUID": "7c888956-9889-4637-9313-3c2d65514279",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow buying of tokens when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should allow buying of tokens when unpaused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "7eabac92-aafa-484d-8a3c-7f66ce5b0cfb",
                          "parentUUID": "7c888956-9889-4637-9313-3c2d65514279",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow selling of tokens when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should allow selling of tokens when unpaused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "57855585-c361-4326-9aa1-5b59594df1b6",
                          "parentUUID": "7c888956-9889-4637-9313-3c2d65514279",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow selling more tokens than you have",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow selling more tokens than you have",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "88806214-adfd-4384-a4d2-f0e96d2cc001",
                          "parentUUID": "7c888956-9889-4637-9313-3c2d65514279",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should issue correct amount of tokens when buying tokens with 1 ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should issue correct amount of tokens when buying tokens with 1 ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "aa690b06-9ca8-4e0f-831b-c3cdd92bfcde",
                          "parentUUID": "7c888956-9889-4637-9313-3c2d65514279",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should send the correct amount of ZIL to you after selling tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should send the correct amount of ZIL to you after selling tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "b31987ac-a0ed-4be7-aa2a-669101d16788",
                          "parentUUID": "7c888956-9889-4637-9313-3c2d65514279",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "f3c404c1-87e6-419c-ae81-42cdb7747e6d",
                        "21c8e368-5eae-4105-a9be-a46b02f7040e"
                      ],
                      "failures": [],
                      "pending": [
                        "7eabac92-aafa-484d-8a3c-7f66ce5b0cfb",
                        "57855585-c361-4326-9aa1-5b59594df1b6",
                        "88806214-adfd-4384-a4d2-f0e96d2cc001",
                        "aa690b06-9ca8-4e0f-831b-c3cdd92bfcde",
                        "b31987ac-a0ed-4be7-aa2a-669101d16788"
                      ],
                      "skipped": [],
                      "duration": 439,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "102e862a-83ee-491e-ba14-63648ac655e1",
                      "title": "Debt Management",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow creating new debt",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should allow creating new debt",
                          "timedOut": false,
                          "duration": 66,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.createDebt();\nconsole.log(receipt)",
                          "err": {},
                          "uuid": "c69bc5fd-156e-484d-9239-d01c263f6ff0",
                          "parentUUID": "102e862a-83ee-491e-ba14-63648ac655e1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should only allow admin to cancel a debt",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should only allow admin to cancel a debt",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "1825306e-4cfd-456e-bf33-dc733a0e5baf",
                          "parentUUID": "102e862a-83ee-491e-ba14-63648ac655e1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should error when trying to cancel a debt that does not exist",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should error when trying to cancel a debt that does not exist",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "6c76ea2c-7082-4e32-b240-2d32d08c0c9f",
                          "parentUUID": "102e862a-83ee-491e-ba14-63648ac655e1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow a debt to be partially paid with tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should allow a debt to be partially paid with tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "a51bc6a9-9d15-4b9f-ae38-9b5e4912894a",
                          "parentUUID": "102e862a-83ee-491e-ba14-63648ac655e1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow a debt to be paid in full with tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should allow a debt to be paid in full with tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "8639934b-a5a9-4475-b2ba-5cb9c9d18a46",
                          "parentUUID": "102e862a-83ee-491e-ba14-63648ac655e1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow a debt to be partially paid with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should allow a debt to be partially paid with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "cd949edf-8c9e-4db5-98e5-0157f708e349",
                          "parentUUID": "102e862a-83ee-491e-ba14-63648ac655e1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow a debt to be paid in full with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should allow a debt to be paid in full with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "bdcf7aa4-88ad-43de-b9af-0af0bfc18e4a",
                          "parentUUID": "102e862a-83ee-491e-ba14-63648ac655e1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow a debt to be partially paid with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should allow a debt to be partially paid with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "2101c684-55f7-45b7-92c9-8f19122eef44",
                          "parentUUID": "102e862a-83ee-491e-ba14-63648ac655e1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow a debt to be paid in full with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should allow a debt to be paid in full with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "0583c2e3-4d07-4ec9-9e4a-adfd7b4b0f4b",
                          "parentUUID": "102e862a-83ee-491e-ba14-63648ac655e1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should issue new tokens if debt is overpaid with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should issue new tokens if debt is overpaid with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "b5a410e4-2e5e-409b-81bd-e65c8ebedfe4",
                          "parentUUID": "102e862a-83ee-491e-ba14-63648ac655e1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow a debt to be overpaid with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should allow a debt to be overpaid with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "95094dd8-e04e-463e-bcc6-a68fb3dbede9",
                          "parentUUID": "102e862a-83ee-491e-ba14-63648ac655e1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow multiple payments against a debt",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should allow multiple payments against a debt",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "0eb8a9f7-d648-47e2-830d-33909bc1d658",
                          "parentUUID": "102e862a-83ee-491e-ba14-63648ac655e1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should only consume the correct amount of tokens when debt is overpaid",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should only consume the correct amount of tokens when debt is overpaid",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "e71997a1-492b-4c55-9762-6cab9a769626",
                          "parentUUID": "102e862a-83ee-491e-ba14-63648ac655e1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow payments against fully paid debts",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should not allow payments against fully paid debts",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "d997134f-c9c4-4b25-a46e-8ff7b60d1c31",
                          "parentUUID": "102e862a-83ee-491e-ba14-63648ac655e1",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "c69bc5fd-156e-484d-9239-d01c263f6ff0"
                      ],
                      "failures": [],
                      "pending": [
                        "1825306e-4cfd-456e-bf33-dc733a0e5baf",
                        "6c76ea2c-7082-4e32-b240-2d32d08c0c9f",
                        "a51bc6a9-9d15-4b9f-ae38-9b5e4912894a",
                        "8639934b-a5a9-4475-b2ba-5cb9c9d18a46",
                        "cd949edf-8c9e-4db5-98e5-0157f708e349",
                        "bdcf7aa4-88ad-43de-b9af-0af0bfc18e4a",
                        "2101c684-55f7-45b7-92c9-8f19122eef44",
                        "0583c2e3-4d07-4ec9-9e4a-adfd7b4b0f4b",
                        "b5a410e4-2e5e-409b-81bd-e65c8ebedfe4",
                        "95094dd8-e04e-463e-bcc6-a68fb3dbede9",
                        "0eb8a9f7-d648-47e2-830d-33909bc1d658",
                        "e71997a1-492b-4c55-9762-6cab9a769626",
                        "d997134f-c9c4-4b25-a46e-8ff7b60d1c31"
                      ],
                      "skipped": [],
                      "duration": 66,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 100000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "quiet": "true",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}