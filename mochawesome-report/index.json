{
  "stats": {
    "suites": 0,
    "tests": 0,
    "passes": 0,
    "pending": 0,
    "failures": 0,
    "start": "2021-04-04T11:27:59.686Z",
    "end": "2021-04-04T11:27:59.799Z",
    "duration": 113,
    "testsRegistered": 40,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 1,
    "hasOther": true,
    "skipped": 40,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "a55872f3-a1f5-4338-b9d7-27fb4f562e39",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 69,
          "state": "failed",
          "speed": null,
          "pass": false,
          "fail": true,
          "pending": false,
          "context": null,
          "code": "zilliqa = new Zilliqa(network);\nnetwork_id = await zilliqa.network.GetNetworkId();\n// Check that we are using correct address\nzilliqa.wallet.addByPrivateKey(adminPrivateKey);\naddress = getAddressFromPrivateKey(adminPrivateKey).toLowerCase();\nconst addressCheck = addressEqual(address, adminAddress);\nexpect(addressCheck).to.be.true;\n// Check address has at least 10 ZIL\nconst bal_obj = await zilliqa.blockchain.getBalance(address);\nconst balance_BN = new BN(bal_obj.result.balance);\nconst min_amount_BN = units.toQa(10, units.Units.Zil);\nlet ok = balance_BN.gte(min_amount_BN);\nexpect(ok).to.be.true;\n// Read contract address\nok = false;\ntry {\n  code = fs.readFileSync('contracts/treasury.scilla', 'utf-8');\n  ok = true;\n} catch (err) {\n  throw err \n}\nexpect(ok).to.be.true;\n// Deploy the contract\nthis.timeout(timeout_deploy);\nthis.slow(timeout_deploy / 2);\nconst MSG_VERSION = 1;\nconst VERSION = bytes.pack(chain_id, MSG_VERSION);\nconst myGasPrice = units.toQa('1000', units.Units.Li);\nconst init = [\n  { vname: '_scilla_version', type: 'Uint32', value: '0'},\n  { vname: 'init_admin', type:  'ByStr20', value: address },\n  { vname: 'init_company', type:  'ByStr20', value: address },\n  { vname: 'proxy_address', type:  'ByStr20', value: address },\n  { vname: 'token_address', type:  'ByStr20', value: address },\n  { vname: 'base_value', type:  'Uint128', value: baseValue }\n];\nconst contract = zilliqa.contracts.new(code, init);\n[deployTx, treasury] = await contract.deploy({\n  version: VERSION,\n  gasPrice: myGasPrice,\n  gasLimit: Long.fromNumber(15000),\n});\nconsole.log(\"Deployed Contract Address =\", treasury.address);\nexpect(deployTx.txParams.receipt.success).to.be.true;\ntreasury_api = new TreasuryAPI(treasury, chain_id);\nexpect(treasury_api).be.instanceOf(TreasuryAPI);",
          "err": {
            "message": "FetchError: request to http://localhost:5555/ failed, reason: connect ECONNREFUSED 127.0.0.1:5555",
            "estack": "FetchError: request to http://localhost:5555/ failed, reason: connect ECONNREFUSED 127.0.0.1:5555\n    at ClientRequest.<anonymous> (node_modules/node-fetch/lib/index.js:1393:11)\n    at Socket.socketErrorListener (_http_client.js:392:9)\n    at emitErrorNT (internal/streams/destroy.js:91:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:59:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)",
            "diff": null
          },
          "uuid": "126b2fcb-43af-4930-adae-c719648ee679",
          "parentUUID": "a55872f3-a1f5-4338-b9d7-27fb4f562e39",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook",
          "fullTitle": "\"before each\" hook",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "//Reset admin\n  treasury_api.setSigningAddress(adminPrivateKey); //@todo - we need to read the current admin and do look up for private key\n  resp = await treasury_api.changeAdmin(adminAddress);\n  expect(resp.success).to.be.true;",
          "err": {},
          "uuid": "4b935f84-6c7e-4adc-b8c8-e4b581a38645",
          "parentUUID": "a55872f3-a1f5-4338-b9d7-27fb4f562e39",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f131f8ff-fab4-458f-92f9-ea6b42f741f7",
          "title": "Treasury Smart Contract Tests",
          "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
          "file": "/test/treasury.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fe401828-cec1-4ac3-9432-6b49fae1d36a",
              "title": "Connect to Zilliqa Blockchain",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should run on node version v10",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should run on node version v10",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const node_version = process.version;\nconst nodeVersionCheck = (node_version.substring(0,4) == nodeVersion);\nexpect(nodeVersionCheck).to.be.true;",
                  "err": {},
                  "uuid": "b5d04465-b78c-4c45-a110-ae110b4dfe05",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should connect to the blockchain and get the right chain_id",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should connect to the blockchain and get the right chain_id",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = parseInt(network_id.result)\nexpect(id).to.equal(chain_id)",
                  "err": {},
                  "uuid": "4ff9e6b8-4376-4967-add0-78900e494bab",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "b5d04465-b78c-4c45-a110-ae110b4dfe05",
                "4ff9e6b8-4376-4967-add0-78900e494bab"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fb105a9b-aeb5-4d06-9325-442a4ca81abb",
              "title": "Deployment Checks",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have correct admin address",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct admin address",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contractAdminAddress = await treasury_api.getAdmin();\nexpect(contractAdminAddress).to.equal(address)",
                  "err": {},
                  "uuid": "dced39fa-f1d4-4b6d-9233-9d263a91fb24",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should have correct company address",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct company address",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contractCompanyAddress = await treasury_api.getCompany();\nexpect(contractCompanyAddress).to.equal(address)",
                  "err": {},
                  "uuid": "98f1cc8a-ed18-453a-9011-4891900295d6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should have correct base price",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct base price",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const price = await treasury_api.getTokenPrice();\nconst bn_price = new BN(price);\nexpect(bn_price).to.deep.equal(units.toQa(baseValue, units.Units.Zil))",
                  "err": {},
                  "uuid": "baa421c4-ba5f-4383-b3f3-e45e3bffd34c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should have 0 tokens",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have 0 tokens",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const num_tokens = await treasury_api.getTokenBalance();\nexpect(num_tokens).to.equal('0')",
                  "err": {},
                  "uuid": "40fe7784-f6c1-4303-b1fe-86f7479e95d7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should be \"paused\" on contract creation",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should be \"paused\" on contract creation",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pausedStatus = await treasury_api.isPaused();\nexpect(pausedStatus).to.equal('True')",
                  "err": {},
                  "uuid": "f827fa0d-ca71-40c8-87b5-b4467f81d4b0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should not be \"under funded\" on contract creation",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should not be \"under funded\" on contract creation",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fundedStatus = await treasury_api.isUnderFunded();\nexpect(fundedStatus).to.equal('False')",
                  "err": {},
                  "uuid": "48ca4deb-349d-44d2-a1f0-dc6903b059ce",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "dced39fa-f1d4-4b6d-9233-9d263a91fb24",
                "98f1cc8a-ed18-453a-9011-4891900295d6",
                "baa421c4-ba5f-4383-b3f3-e45e3bffd34c",
                "40fe7784-f6c1-4303-b1fe-86f7479e95d7",
                "f827fa0d-ca71-40c8-87b5-b4467f81d4b0",
                "48ca4deb-349d-44d2-a1f0-dc6903b059ce"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0e12c7fe-8139-4381-9bf6-8c23a5f8a892",
              "title": "Contract Tests",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "8a6d149d-82fb-4676-827d-60fbf082ba3f",
                  "title": "Management Functions",
                  "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                  "file": "/test/treasury.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "d00709ce-c43c-464e-9b8c-531f05feb75c",
                      "title": "Pausing Related Transitions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow admin to unpause when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should allow admin to unpause when paused",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.unpauseContract();\nexpect(receipt.success).to.be.true;",
                          "err": {},
                          "uuid": "d2488b68-15ef-4d39-862c-7afbad7a4b00",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "should allow admin to pause when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should allow admin to pause when unpaused",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.pauseContract();\nexpect(receipt.success).to.be.true;",
                          "err": {},
                          "uuid": "f72c1ff6-a698-408d-bc91-4b2fb0e6ad6e",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "should not allow unpausing if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should not allow unpausing if not admin",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "exceptionCode = 'Int32 -1';\n          const receipt = await treasury_api.pauseContract();         //make sure it is paused first\n          expect(receipt.success).to.be.true;\n          \n          await treasury_api.setSigningAddress(nonAdminPrivateKey)    // change txn signer to non adming...\n          const receipt2 = await treasury_api.unpauseContract();      // ...and attempt to unpause\n          \n          checkException(receipt2, exceptionCode);\n          expect(receipt2.success).to.be.false;                       // txn should have failed",
                          "err": {},
                          "uuid": "d334089a-4e2e-4261-a001-a601d56fa762",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "should not allow pausing if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should not allow pausing if not admin",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "exceptionCode = 'Int32 -1';\nconst receipt = await treasury_api.unpauseContract();       //make sure it is unpaused first\nexpect(receipt.success).to.be.true;\n\nawait treasury_api.setSigningAddress(nonAdminPrivateKey)    // change txn signer to non adming...\nconst receipt2 = await treasury_api.pauseContract();        // ...and attempt to pause\n\ncheckException(receipt2, exceptionCode);\nexpect(receipt2.success).to.be.false;                       // txn should have failed",
                          "err": {},
                          "uuid": "bfab839c-dcfa-4293-8023-26cf96fe6b37",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": true
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [
                        "d2488b68-15ef-4d39-862c-7afbad7a4b00",
                        "f72c1ff6-a698-408d-bc91-4b2fb0e6ad6e",
                        "d334089a-4e2e-4261-a001-a601d56fa762",
                        "bfab839c-dcfa-4293-8023-26cf96fe6b37"
                      ],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "958fdb74-bc48-4fc1-9234-a4e49c88659c",
                      "title": "Admin Related Transitions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow admin to change admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should allow admin to change admin",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// test invalid address fails\n          const receipt1 = await treasury_api.changeAdmin(\"InvalidAddress\");\n          expect(receipt1.success).to.be.false;\n          // test valid address succeeds\n          const receipt2 = await treasury_api.changeAdmin(nonAdminAddress);\n          expect(receipt2.success).to.be.true; \n          //reset back to original admin\n          await treasury_api.setSigningAddress(nonAdminPrivateKey)          \n          const receipt3 = await treasury_api.changeAdmin(adminAddress);\n          expect(receipt3.success).to.be.true;",
                          "err": {},
                          "uuid": "80a721b5-2f9d-4238-b5a5-a0bdeed76492",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "should not allow changing admin if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should not allow changing admin if not admin",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "exceptionCode = 'Int32 -1';          \n          await treasury_api.setSigningAddress(nonAdminPrivateKey)          // change txn signer to non admin...\n          const receipt2 = await treasury_api.changeAdmin(nonAdminAddress); // ...and attempt to change admin\n          //console.log(receipt2);\n          checkException(receipt2, exceptionCode);\n          \n          expect(receipt2.success).to.be.false;                             // txn should have failed",
                          "err": {},
                          "uuid": "033e36cf-17ac-44e5-bf5c-85d9842dd6ca",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "should allow admin to change company",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should allow admin to change company",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.changeCompany(nonAdminAddress);\n//console.log(receipt);\nexpect(receipt.success).to.be.true;\n//need to confirm that company address has been set correctly.\nconst contractCompanyAddress = await treasury_api.getCompany();\n//console.log(contractCompanyAddress);\nexpect(contractCompanyAddress).to.equal(nonAdminAddress);",
                          "err": {},
                          "uuid": "60480c26-d962-4580-bda4-61ecd50d2b2e",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "should not allow changing company if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should not allow changing company if not admin",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "exceptionCode = 'Int32 -1';          \nawait treasury_api.setSigningAddress(nonAdminPrivateKey)          // change txn signer to non admin...\nconst receipt = await treasury_api.changeCompany(nonAdminAddress); // ...and attempt to change admin\ncheckException(receipt, exceptionCode);\n\nexpect(receipt.success).to.be.false;                             // txn should have failed",
                          "err": {},
                          "uuid": "122b7a7a-4145-4c35-bacb-b6ee0146274e",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": true
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [],
                      "skipped": [
                        "80a721b5-2f9d-4238-b5a5-a0bdeed76492",
                        "033e36cf-17ac-44e5-bf5c-85d9842dd6ca",
                        "60480c26-d962-4580-bda4-61ecd50d2b2e",
                        "122b7a7a-4145-4c35-bacb-b6ee0146274e"
                      ],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "61b79a38-c2b4-4cd5-8380-670c144d9cd6",
                      "title": "Internal Functions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should recalculate exchange rates when receiving ZIL that is not for buying tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Internal Functions should recalculate exchange rates when receiving ZIL that is not for buying tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "91f0c7fc-05d4-4d81-ac5b-e2a00b30bafc",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should recalculate exchange rates when receiving TOKENS that is not for paying invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Internal Functions should recalculate exchange rates when receiving TOKENS that is not for paying invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "b8a49524-aa1c-44d8-b07f-7e57bc4cae3f",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "91f0c7fc-05d4-4d81-ac5b-e2a00b30bafc",
                        "b8a49524-aa1c-44d8-b07f-7e57bc4cae3f"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "8cd925c1-1d58-4491-8533-b246405c8188",
                      "title": "Trading Features",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should not allow buying of tokens when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow buying of tokens when paused",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "//pause it first\n          const receipt2 = await treasury_api.pauseContract(); \n          expect(receipt2.success).to.be.true;\n          const zil_amount_BN = units.toQa(5, units.Units.Zil);\n          const receipt = await treasury_api.buyTokens(zil_amount_BN);\n          //check error is due to being 'paused'\n          exceptionCode = 'Int32 -5'\n          checkException(receipt, exceptionCode);\n          expect(receipt.success).to.be.false;",
                          "err": {},
                          "uuid": "79ba69b0-06dc-4255-b3ee-0f041a02c502",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "should not allow selling of tokens when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow selling of tokens when paused",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "//pause it first\nconst receipt2 = await treasury_api.pauseContract(); \nexpect(receipt2.success).to.be.true;\n//const zil_amount_BN = units.toQa(5, units.Units.Zil);\nconst receipt = await treasury_api.sellTokens();\n//check error is due to being 'paused'\nexceptionCode = 'Int32 -5'\ncheckException(receipt, exceptionCode);\n//console.log(receipt);\nexpect(receipt.success).to.be.false;",
                          "err": {},
                          "uuid": "eb19aded-16ed-4c79-8ec6-1030b4f63203",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "should allow buying of tokens when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should allow buying of tokens when unpaused",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "a9033ff4-92c5-4bbb-a565-2a6184109603",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow selling of tokens when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should allow selling of tokens when unpaused",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "795ee0df-11b2-4659-a972-862d8663e8ca",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow selling more tokens than you have",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow selling more tokens than you have",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "75915f70-7688-426f-b12d-7f33af461d9a",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should issue correct amount of tokens when buying tokens with 1 ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should issue correct amount of tokens when buying tokens with 1 ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "0cf7c88e-b93f-4a27-aacd-bb02b4be9450",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should send the correct amount of ZIL to you after selling tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should send the correct amount of ZIL to you after selling tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "31d3cdcd-f66c-48b4-a39b-cb0cb85d790f",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "a9033ff4-92c5-4bbb-a565-2a6184109603",
                        "795ee0df-11b2-4659-a972-862d8663e8ca",
                        "75915f70-7688-426f-b12d-7f33af461d9a",
                        "0cf7c88e-b93f-4a27-aacd-bb02b4be9450",
                        "31d3cdcd-f66c-48b4-a39b-cb0cb85d790f"
                      ],
                      "skipped": [
                        "79ba69b0-06dc-4255-b3ee-0f041a02c502",
                        "eb19aded-16ed-4c79-8ec6-1030b4f63203"
                      ],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "e2007636-e0cf-4deb-b58e-f4912e64ab2d",
                      "title": "Debt Management",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow creating new debt",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should allow creating new debt",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.createDebt();\nconsole.log(receipt)",
                          "err": {},
                          "uuid": "ed0c6cb8-2b00-40ae-a941-d1e867bead90",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "should not allow creating debt with same id",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should not allow creating debt with same id",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.createDebt();\nconsole.log(receipt)",
                          "err": {},
                          "uuid": "e0bc109d-2ee0-41d9-92d8-5a3ed58c00b9",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": true
                        },
                        {
                          "title": "should only allow admin to cancel a debt",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should only allow admin to cancel a debt",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "c5199781-0b22-42a1-aba2-b7dd8dc2a365",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should error when trying to cancel a debt that does not exist",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should error when trying to cancel a debt that does not exist",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "2a98215b-0ea0-4153-b3d2-4bbb3e85ec42",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow a debt to be partially paid with tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should allow a debt to be partially paid with tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "4c387b22-7fe9-4e5a-ac24-fe8da5811002",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow a debt to be paid in full with tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should allow a debt to be paid in full with tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "f1375cdf-e58f-4f12-b797-9a7832b16e47",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow a debt to be partially paid with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should allow a debt to be partially paid with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "44e123ef-4b09-4ca1-b003-bf0510965d87",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow a debt to be paid in full with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should allow a debt to be paid in full with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "09d2d7c4-dadf-4d16-b67d-fa72e973286b",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow a debt to be partially paid with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should allow a debt to be partially paid with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "060d80a3-bc81-471f-8419-fbfc3e6aacaf",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow a debt to be paid in full with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should allow a debt to be paid in full with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "8f9ba8d2-2d36-4633-958e-9f9c898bd742",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should issue new tokens if debt is overpaid with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should issue new tokens if debt is overpaid with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "6db060c0-a9cb-4034-b05a-fcd32d31c0eb",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow a debt to be overpaid with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should allow a debt to be overpaid with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "30012254-1d4b-4db2-9e28-21d3acd8c5ff",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow multiple payments against a debt",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should allow multiple payments against a debt",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "4c48a875-a8af-4825-8909-ac404e1c6e5c",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should only consume the correct amount of tokens when debt is overpaid",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should only consume the correct amount of tokens when debt is overpaid",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "151279df-b366-40e0-8696-0b58e9fb8a28",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow payments against fully paid debts",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Debt Management should not allow payments against fully paid debts",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "fb550097-3a34-42a8-95b8-61ba4e9dbfed",
                          "parentUUID": null,
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "c5199781-0b22-42a1-aba2-b7dd8dc2a365",
                        "2a98215b-0ea0-4153-b3d2-4bbb3e85ec42",
                        "4c387b22-7fe9-4e5a-ac24-fe8da5811002",
                        "f1375cdf-e58f-4f12-b797-9a7832b16e47",
                        "44e123ef-4b09-4ca1-b003-bf0510965d87",
                        "09d2d7c4-dadf-4d16-b67d-fa72e973286b",
                        "060d80a3-bc81-471f-8419-fbfc3e6aacaf",
                        "8f9ba8d2-2d36-4633-958e-9f9c898bd742",
                        "6db060c0-a9cb-4034-b05a-fcd32d31c0eb",
                        "30012254-1d4b-4db2-9e28-21d3acd8c5ff",
                        "4c48a875-a8af-4825-8909-ac404e1c6e5c",
                        "151279df-b366-40e0-8696-0b58e9fb8a28",
                        "fb550097-3a34-42a8-95b8-61ba4e9dbfed"
                      ],
                      "skipped": [
                        "ed0c6cb8-2b00-40ae-a941-d1e867bead90",
                        "e0bc109d-2ee0-41d9-92d8-5a3ed58c00b9"
                      ],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 100000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "quiet": "true",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}