{
  "stats": {
    "suites": 10,
    "tests": 43,
    "passes": 14,
    "pending": 29,
    "failures": 0,
    "start": "2020-11-10T13:04:20.665Z",
    "end": "2020-11-10T13:04:22.175Z",
    "duration": 1510,
    "testsRegistered": 43,
    "passPercent": 100,
    "pendingPercent": 67.44186046511628,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6f18cc2c-e7d4-4bf1-9608-df6183e0afbd",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1935e122-2c23-4a14-bf54-2fadc1d8950c",
          "title": "Treasury Smart Contract Tests",
          "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
          "file": "/test/treasury.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "77fe3c56-cc9e-4b5a-b444-7e8f6ff9d509",
              "title": "Connect to Zilliqa Blockchain",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should run on node version v10",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should run on node version v10",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const node_version = process.version;\nconst ok = (node_version.substring(0,4) == 'v10.');\nexpect(ok).to.be.true;",
                  "err": {},
                  "uuid": "d3b1b206-fc1e-4d55-b180-44b815ac1799",
                  "parentUUID": "77fe3c56-cc9e-4b5a-b444-7e8f6ff9d509",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should connect to the blockchain and get the right chain_id",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should connect to the blockchain and get the right chain_id",
                  "timedOut": false,
                  "duration": 78,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "zilliqa = new Zilliqa(network);\nconst network_id = await zilliqa.network.GetNetworkId();\nconst id = parseInt(network_id.result)\nexpect(id).to.equal(chain_id)",
                  "err": {},
                  "uuid": "59d06445-a1b0-49dc-b599-d65b2c097e51",
                  "parentUUID": "77fe3c56-cc9e-4b5a-b444-7e8f6ff9d509",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have the right test account",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should have the right test account",
                  "timedOut": false,
                  "duration": 250,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "zilliqa.wallet.addByPrivateKey(privateKey);\naddress = getAddressFromPrivateKey(privateKey).toLowerCase();\nconst ok = addressEqual(address, account_address);\nexpect(ok).to.be.true;",
                  "err": {},
                  "uuid": "fe841ca3-74fb-4e98-89cd-a6688cf238b5",
                  "parentUUID": "77fe3c56-cc9e-4b5a-b444-7e8f6ff9d509",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have at least 10 ZIL in the account",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should have at least 10 ZIL in the account",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bal_obj = await zilliqa.blockchain.getBalance(address);\nconst balance_BN = new BN(bal_obj.result.balance);\nconst min_amount_BN = units.toQa(10, units.Units.Zil);\nconst ok = balance_BN.gte(min_amount_BN);\nexpect(ok).to.be.true;",
                  "err": {},
                  "uuid": "4f81a9f9-f166-4780-abea-35b71937b1d3",
                  "parentUUID": "77fe3c56-cc9e-4b5a-b444-7e8f6ff9d509",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d3b1b206-fc1e-4d55-b180-44b815ac1799",
                "59d06445-a1b0-49dc-b599-d65b2c097e51",
                "fe841ca3-74fb-4e98-89cd-a6688cf238b5",
                "4f81a9f9-f166-4780-abea-35b71937b1d3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 365,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "52aa60da-af97-4b7a-bf06-beeaec3b0e8f",
              "title": "Deployment Checks",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should read contract source",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should read contract source",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let ok = false;\n      try {\n          code = fs.readFileSync('contracts/treasury.scilla', 'utf-8');\n          ok = true;\n      } catch (err) {\n        throw err \n      }\n      expect(ok).to.be.true;",
                  "err": {},
                  "uuid": "da4033d2-323f-492d-b3e7-58509b510b81",
                  "parentUUID": "52aa60da-af97-4b7a-bf06-beeaec3b0e8f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should deploy the contract",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should deploy the contract",
                  "timedOut": false,
                  "duration": 487,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(timeout_deploy);\nthis.slow(timeout_deploy / 2);\nconst MSG_VERSION = 1;\nconst VERSION = bytes.pack(chain_id, MSG_VERSION);\nconst myGasPrice = units.toQa('1000', units.Units.Li);\nconst init = [\n  { vname: '_scilla_version', type: 'Uint32', value: '0'},\n  { vname: 'init_admin', type:  'ByStr20', value: address },\n  { vname: 'init_company', type:  'ByStr20', value: address },\n  { vname: 'proxy_address', type:  'ByStr20', value: address },\n  { vname: 'token_address', type:  'ByStr20', value: address },\n  { vname: 'base_value', type:  'Uint128', value: '5' }\n];\nconst contract = zilliqa.contracts.new(code, init);\n[deployTx, treasury] = await contract.deploy({\n  version: VERSION,\n  gasPrice: myGasPrice,\n  gasLimit: Long.fromNumber(15000),\n});\n//console.log(deployTx);\nconsole.log(\"        contract address =\", treasury.address);\nexpect(deployTx.txParams.receipt.success).to.be.true;",
                  "err": {},
                  "uuid": "bef62a4f-ef3a-42a1-a282-3c9b9d60c6de",
                  "parentUUID": "52aa60da-af97-4b7a-bf06-beeaec3b0e8f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct admin address",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct admin address",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "allState = await treasury.getState();\nexpect(allState.admin).to.equal(address)",
                  "err": {},
                  "uuid": "eefdee47-8267-4f70-86b1-95dc64787c5e",
                  "parentUUID": "52aa60da-af97-4b7a-bf06-beeaec3b0e8f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct company address",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct company address",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(allState.company).to.equal(address)",
                  "err": {},
                  "uuid": "6eb521e5-cf47-47b0-8815-25aac83d7933",
                  "parentUUID": "52aa60da-af97-4b7a-bf06-beeaec3b0e8f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct base price",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct base price",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bn_price = new BN(allState.token_price);\nexpect(bn_price).to.deep.equal(units.toQa('5', units.Units.Zil))",
                  "err": {},
                  "uuid": "5f32cf8d-f917-4f08-af4e-cfaebcbd9cc6",
                  "parentUUID": "52aa60da-af97-4b7a-bf06-beeaec3b0e8f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be \"paused\" on contract creation",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should be \"paused\" on contract creation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(allState.paused.constructor).to.equal('True')",
                  "err": {},
                  "uuid": "fc5e731c-23f9-416a-9226-b3a23f24d348",
                  "parentUUID": "52aa60da-af97-4b7a-bf06-beeaec3b0e8f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not be \"under funded\" on contract creation",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should not be \"under funded\" on contract creation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(allState.under_funded.constructor).to.equal('False')",
                  "err": {},
                  "uuid": "6fe1cf3f-774f-48a0-8a1c-36531f4cd07b",
                  "parentUUID": "52aa60da-af97-4b7a-bf06-beeaec3b0e8f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da4033d2-323f-492d-b3e7-58509b510b81",
                "bef62a4f-ef3a-42a1-a282-3c9b9d60c6de",
                "eefdee47-8267-4f70-86b1-95dc64787c5e",
                "6eb521e5-cf47-47b0-8815-25aac83d7933",
                "5f32cf8d-f917-4f08-af4e-cfaebcbd9cc6",
                "fc5e731c-23f9-416a-9226-b3a23f24d348",
                "6fe1cf3f-774f-48a0-8a1c-36531f4cd07b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 527,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "03a4d6b4-4600-43a9-98d2-00fdf57544f3",
              "title": "Contract Tests",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get the treasury_api",
                  "fullTitle": "Treasury Smart Contract Tests Contract Tests should get the treasury_api",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "treasury_api = new TreasuryAPI(treasury, chain_id);\nexpect(treasury_api).be.instanceOf(TreasuryAPI);",
                  "err": {},
                  "uuid": "60a5c7b6-4d47-4226-84ac-6e64b1fe6003",
                  "parentUUID": "03a4d6b4-4600-43a9-98d2-00fdf57544f3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "bb68800e-8eec-4592-9d04-eea9f5dcf115",
                  "title": "Management Functions",
                  "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                  "file": "/test/treasury.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "d5aafed6-78b6-4b6f-8d9d-8c6db450224d",
                      "title": "Pausing Related Transitions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow admin to unpause when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should allow admin to unpause when paused",
                          "timedOut": false,
                          "duration": 237,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.unpauseContract();\nexpect(receipt.success).to.be.true;",
                          "err": {},
                          "uuid": "2ef8b1aa-235c-4dbe-92c5-9ec62939301b",
                          "parentUUID": "d5aafed6-78b6-4b6f-8d9d-8c6db450224d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow admin to pause when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should allow admin to pause when unpaused",
                          "timedOut": false,
                          "duration": 203,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.pauseContract();\nexpect(receipt.success).to.be.true;",
                          "err": {},
                          "uuid": "bd216044-a92c-44d4-a036-296280b6f15a",
                          "parentUUID": "d5aafed6-78b6-4b6f-8d9d-8c6db450224d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow pausing if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should not allow pausing if not admin",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "06d8d8ef-d8dd-4ce7-b60a-a79be873296a",
                          "parentUUID": "d5aafed6-78b6-4b6f-8d9d-8c6db450224d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow unpausing if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should not allow unpausing if not admin",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "afbaebcc-0a2a-471d-9880-19cc13ca6138",
                          "parentUUID": "d5aafed6-78b6-4b6f-8d9d-8c6db450224d",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "2ef8b1aa-235c-4dbe-92c5-9ec62939301b",
                        "bd216044-a92c-44d4-a036-296280b6f15a"
                      ],
                      "failures": [],
                      "pending": [
                        "06d8d8ef-d8dd-4ce7-b60a-a79be873296a",
                        "afbaebcc-0a2a-471d-9880-19cc13ca6138"
                      ],
                      "skipped": [],
                      "duration": 440,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 300000
                    },
                    {
                      "uuid": "b065a16c-e2cb-48cc-8dda-762eec24f98e",
                      "title": "Admin Related Transitions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow admin to change admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should allow admin to change admin",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "8548ddb0-6f60-444c-bc15-e05cf69988d0",
                          "parentUUID": "b065a16c-e2cb-48cc-8dda-762eec24f98e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow changing admin if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should not allow changing admin if not admin",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "1954b04a-ceea-453e-a96f-7db704621311",
                          "parentUUID": "b065a16c-e2cb-48cc-8dda-762eec24f98e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow admin to change company",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should allow admin to change company",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "b62e4f5f-9a07-45e9-861c-cafd158681b7",
                          "parentUUID": "b065a16c-e2cb-48cc-8dda-762eec24f98e",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow changing company if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should not allow changing company if not admin",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "5d6d4912-22ae-472c-a441-46b4ede39ae8",
                          "parentUUID": "b065a16c-e2cb-48cc-8dda-762eec24f98e",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "8548ddb0-6f60-444c-bc15-e05cf69988d0",
                        "1954b04a-ceea-453e-a96f-7db704621311",
                        "b62e4f5f-9a07-45e9-861c-cafd158681b7",
                        "5d6d4912-22ae-472c-a441-46b4ede39ae8"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 300000
                    },
                    {
                      "uuid": "65d7657e-4bc4-42be-944a-7f9f995cdd9d",
                      "title": "Internal Functions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should recalculate exchange rates when receiving ZIL that is not for buying tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Internal Functions should recalculate exchange rates when receiving ZIL that is not for buying tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "3e903172-3520-4994-af96-9a7029d1befa",
                          "parentUUID": "65d7657e-4bc4-42be-944a-7f9f995cdd9d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should recalculate exchange rates when receiving TOKENS that is not for paying invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Internal Functions should recalculate exchange rates when receiving TOKENS that is not for paying invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "74bb6b55-9c3d-4bf3-a0f8-ca080cd93b1d",
                          "parentUUID": "65d7657e-4bc4-42be-944a-7f9f995cdd9d",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "3e903172-3520-4994-af96-9a7029d1befa",
                        "74bb6b55-9c3d-4bf3-a0f8-ca080cd93b1d"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 300000
                    },
                    {
                      "uuid": "62d655d3-7867-4475-9920-d5e99f03734a",
                      "title": "Trading Features",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should not allow buying of tokens when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow buying of tokens when paused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "f2d5d719-0e60-45d8-b631-670c4a8efe76",
                          "parentUUID": "62d655d3-7867-4475-9920-d5e99f03734a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow selling of tokens when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow selling of tokens when paused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "bdd2068f-6d6a-46ab-9bb6-0d5ab9f8f5af",
                          "parentUUID": "62d655d3-7867-4475-9920-d5e99f03734a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow buying of tokens when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should allow buying of tokens when unpaused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "858de2b1-e809-4b17-9078-ad56dc16dfa0",
                          "parentUUID": "62d655d3-7867-4475-9920-d5e99f03734a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow selling of tokens when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should allow selling of tokens when unpaused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "c09432b9-6d05-4a78-ae92-954eebb2749f",
                          "parentUUID": "62d655d3-7867-4475-9920-d5e99f03734a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow selling more tokens than you have",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow selling more tokens than you have",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "16548324-af68-46b7-b19e-31d59ffc4b85",
                          "parentUUID": "62d655d3-7867-4475-9920-d5e99f03734a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should issue correct amount of tokens when buying tokens with 1 ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should issue correct amount of tokens when buying tokens with 1 ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "8e979fe9-88e3-4ff3-b5a2-838753d462e9",
                          "parentUUID": "62d655d3-7867-4475-9920-d5e99f03734a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should send the correct amount of ZIL to you after selling tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should send the correct amount of ZIL to you after selling tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "2e51e11e-cd24-44d4-b0c0-300de1cc3c83",
                          "parentUUID": "62d655d3-7867-4475-9920-d5e99f03734a",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "f2d5d719-0e60-45d8-b631-670c4a8efe76",
                        "bdd2068f-6d6a-46ab-9bb6-0d5ab9f8f5af",
                        "858de2b1-e809-4b17-9078-ad56dc16dfa0",
                        "c09432b9-6d05-4a78-ae92-954eebb2749f",
                        "16548324-af68-46b7-b19e-31d59ffc4b85",
                        "8e979fe9-88e3-4ff3-b5a2-838753d462e9",
                        "2e51e11e-cd24-44d4-b0c0-300de1cc3c83"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 300000
                    },
                    {
                      "uuid": "ad15e87c-988d-454f-82f5-2098f8ed4329",
                      "title": "Invoicing Features",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow creating new invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow creating new invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "867303d4-30dc-4c9c-9a96-26fcc32de01e",
                          "parentUUID": "ad15e87c-988d-454f-82f5-2098f8ed4329",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should only allow admin to cancel an invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should only allow admin to cancel an invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "84a80dd2-d443-457a-aa93-f84fe370de7d",
                          "parentUUID": "ad15e87c-988d-454f-82f5-2098f8ed4329",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should error when trying to cancel an invoice that does not exist",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should error when trying to cancel an invoice that does not exist",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "012b55dd-7da3-445f-a2d2-c67a639d45bb",
                          "parentUUID": "ad15e87c-988d-454f-82f5-2098f8ed4329",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be partially paid with tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be partially paid with tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "d0cbff11-0da0-4fc2-8c75-99edc4c84fb3",
                          "parentUUID": "ad15e87c-988d-454f-82f5-2098f8ed4329",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be paid in full with tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be paid in full with tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "c36e203b-ecf2-4a25-bdeb-b75222d91d25",
                          "parentUUID": "ad15e87c-988d-454f-82f5-2098f8ed4329",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be partially paid with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be partially paid with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "14c086ee-a11d-4a4a-b431-370dab39df81",
                          "parentUUID": "ad15e87c-988d-454f-82f5-2098f8ed4329",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be paid in full with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be paid in full with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "f1821d57-d886-455e-866d-70d6ab01d955",
                          "parentUUID": "ad15e87c-988d-454f-82f5-2098f8ed4329",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be partially paid with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be partially paid with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "35c4e4ef-4349-49ea-a025-7ab8b3adccaa",
                          "parentUUID": "ad15e87c-988d-454f-82f5-2098f8ed4329",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be paid in full with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be paid in full with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "695b67c4-566a-4968-a5a1-cb4732d70c63",
                          "parentUUID": "ad15e87c-988d-454f-82f5-2098f8ed4329",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should issue new tokens if invoice is overpaid with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should issue new tokens if invoice is overpaid with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "8037bcec-a396-459d-8a93-bfb3003cf0f4",
                          "parentUUID": "ad15e87c-988d-454f-82f5-2098f8ed4329",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be overpaid with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be overpaid with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "f43f9fd3-26b0-46bd-801f-d8c758469862",
                          "parentUUID": "ad15e87c-988d-454f-82f5-2098f8ed4329",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow multiple payments against an invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow multiple payments against an invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "d8903ee3-200b-454c-9d33-092f6a48bbb1",
                          "parentUUID": "ad15e87c-988d-454f-82f5-2098f8ed4329",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should only consume the correct amount of tokens when invoice is overpaid",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should only consume the correct amount of tokens when invoice is overpaid",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "3a6594f3-2617-44e2-8824-873b95be2c79",
                          "parentUUID": "ad15e87c-988d-454f-82f5-2098f8ed4329",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow payments against fully paid invoices",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should not allow payments against fully paid invoices",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "fabb0b90-27ad-4416-a13d-0ce9b0ca8dc1",
                          "parentUUID": "ad15e87c-988d-454f-82f5-2098f8ed4329",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "867303d4-30dc-4c9c-9a96-26fcc32de01e",
                        "84a80dd2-d443-457a-aa93-f84fe370de7d",
                        "012b55dd-7da3-445f-a2d2-c67a639d45bb",
                        "d0cbff11-0da0-4fc2-8c75-99edc4c84fb3",
                        "c36e203b-ecf2-4a25-bdeb-b75222d91d25",
                        "14c086ee-a11d-4a4a-b431-370dab39df81",
                        "f1821d57-d886-455e-866d-70d6ab01d955",
                        "35c4e4ef-4349-49ea-a025-7ab8b3adccaa",
                        "695b67c4-566a-4968-a5a1-cb4732d70c63",
                        "8037bcec-a396-459d-8a93-bfb3003cf0f4",
                        "f43f9fd3-26b0-46bd-801f-d8c758469862",
                        "d8903ee3-200b-454c-9d33-092f6a48bbb1",
                        "3a6594f3-2617-44e2-8824-873b95be2c79",
                        "fabb0b90-27ad-4416-a13d-0ce9b0ca8dc1"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 300000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [
                "60a5c7b6-4d47-4226-84ac-6e64b1fe6003"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "quiet": "true",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}