{
  "stats": {
    "suites": 7,
    "tests": 19,
    "passes": 11,
    "pending": 8,
    "failures": 0,
    "start": "2020-11-09T09:16:36.427Z",
    "end": "2020-11-09T09:16:37.288Z",
    "duration": 861,
    "testsRegistered": 19,
    "passPercent": 100,
    "pendingPercent": 42.10526315789473,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0797a0ab-05dc-4bb2-bcba-979313c0c95f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "61da0043-c7f5-4fb1-826d-397d3f464d08",
          "title": "Treasury Smart Contract Tests",
          "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
          "file": "/test/treasury.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8f5a050b-a7a9-4cc8-bbda-881ec4abd3b6",
              "title": "Connect to Zilliqa Blockchain",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should run on node version v10",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should run on node version v10",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const node_version = process.version;\nconst ok = (node_version.substring(0,4) == 'v10.');\nexpect(ok).to.be.true;",
                  "err": {},
                  "uuid": "e8134b09-59cc-494a-ac8e-c056b1239eae",
                  "parentUUID": "8f5a050b-a7a9-4cc8-bbda-881ec4abd3b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should connect to the blockchain and get the right chain_id",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should connect to the blockchain and get the right chain_id",
                  "timedOut": false,
                  "duration": 82,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "zilliqa = new Zilliqa(network);\nconst network_id = await zilliqa.network.GetNetworkId();\nconst id = parseInt(network_id.result)\nexpect(id).to.equal(chain_id)",
                  "err": {},
                  "uuid": "d5b95e37-0748-45b0-8ff3-dcf37eb96f5c",
                  "parentUUID": "8f5a050b-a7a9-4cc8-bbda-881ec4abd3b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have the right test account",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should have the right test account",
                  "timedOut": false,
                  "duration": 73,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "zilliqa.wallet.addByPrivateKey(privateKey);\naddress = getAddressFromPrivateKey(privateKey).toLowerCase();\nconst ok = addressEqual(address, account_address);\nexpect(ok).to.be.true;",
                  "err": {},
                  "uuid": "6f9809c4-6ba1-48ec-82b0-ae20d8756554",
                  "parentUUID": "8f5a050b-a7a9-4cc8-bbda-881ec4abd3b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have at least 10 ZIL in the account",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should have at least 10 ZIL in the account",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bal_obj = await zilliqa.blockchain.getBalance(address);\nconst balance_BN = new BN(bal_obj.result.balance);\nconst min_amount_BN = units.toQa(10, units.Units.Zil);\nconst ok = balance_BN.gte(min_amount_BN);\nexpect(ok).to.be.true;",
                  "err": {},
                  "uuid": "dad8ccf2-a53e-4dcd-8866-b20aff1d6a95",
                  "parentUUID": "8f5a050b-a7a9-4cc8-bbda-881ec4abd3b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8134b09-59cc-494a-ac8e-c056b1239eae",
                "d5b95e37-0748-45b0-8ff3-dcf37eb96f5c",
                "6f9809c4-6ba1-48ec-82b0-ae20d8756554",
                "dad8ccf2-a53e-4dcd-8866-b20aff1d6a95"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 199,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "45eff3ca-b1ca-4c87-adca-9eec72cb177e",
              "title": "Deployment Checks",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should read contract source",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should read contract source",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let ok = false;\n      try {\n          code = fs.readFileSync('contracts/treasury.scilla', 'utf-8');\n          ok = true;\n      } catch (err) {\n        throw err \n      }\n      expect(ok).to.be.true;",
                  "err": {},
                  "uuid": "e40fb02d-659a-45bc-ac8d-87c9b0f49f3e",
                  "parentUUID": "45eff3ca-b1ca-4c87-adca-9eec72cb177e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should deploy the contract",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should deploy the contract",
                  "timedOut": false,
                  "duration": 535,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(timeout_deploy);\nthis.slow(timeout_deploy / 2);\nconst MSG_VERSION = 1;\nconst VERSION = bytes.pack(chain_id, MSG_VERSION);\nconst myGasPrice = units.toQa('1000', units.Units.Li);\nconst init = [\n  { vname: '_scilla_version', type: 'Uint32', value: '0'},\n  { vname: 'init_admin', type:  'ByStr20', value: address },\n  { vname: 'init_company', type:  'ByStr20', value: address },\n  { vname: 'proxy_address', type:  'ByStr20', value: address },\n  { vname: 'token_address', type:  'ByStr20', value: address },\n  { vname: 'base_value', type:  'Uint256', value: '1000' }\n];\nconst contract = zilliqa.contracts.new(code, init);\n[deployTx, treasury] = await contract.deploy({\n  version: VERSION,\n  gasPrice: myGasPrice,\n  gasLimit: Long.fromNumber(15000),\n});\n//console.log(deployTx);\nconsole.log(\"        contract address =\", treasury.address);\nexpect(deployTx.txParams.receipt.success).to.be.true;",
                  "err": {},
                  "uuid": "43d6466a-5aac-4de1-aa29-7013a8caa91a",
                  "parentUUID": "45eff3ca-b1ca-4c87-adca-9eec72cb177e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct admin address",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct admin address",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "allState = await treasury.getState();\nexpect(allState.admin).to.equal(address)",
                  "err": {},
                  "uuid": "e99a2d11-c226-4003-8a4d-7e11ce10bd16",
                  "parentUUID": "45eff3ca-b1ca-4c87-adca-9eec72cb177e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct company address",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct company address",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(allState.company).to.equal(address)",
                  "err": {},
                  "uuid": "e79ca8e0-4d2d-434f-8ef7-876279617a7f",
                  "parentUUID": "45eff3ca-b1ca-4c87-adca-9eec72cb177e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct base price",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct base price",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(allState.token_price).to.equal('1000')",
                  "err": {},
                  "uuid": "eca31f27-ad69-41c1-bbd2-217391fae325",
                  "parentUUID": "45eff3ca-b1ca-4c87-adca-9eec72cb177e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be \"paused\" on contract creation",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should be \"paused\" on contract creation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(allState.paused.constructor).to.equal('True')",
                  "err": {},
                  "uuid": "069e035b-40bc-43ce-ac5a-758a8504939e",
                  "parentUUID": "45eff3ca-b1ca-4c87-adca-9eec72cb177e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not be \"under funded\" on contract creation",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should not be \"under funded\" on contract creation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(allState.under_funded.constructor).to.equal('False')",
                  "err": {},
                  "uuid": "e88ae8de-b6d2-41cd-88cb-66d411359ba3",
                  "parentUUID": "45eff3ca-b1ca-4c87-adca-9eec72cb177e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e40fb02d-659a-45bc-ac8d-87c9b0f49f3e",
                "43d6466a-5aac-4de1-aa29-7013a8caa91a",
                "e99a2d11-c226-4003-8a4d-7e11ce10bd16",
                "e79ca8e0-4d2d-434f-8ef7-876279617a7f",
                "eca31f27-ad69-41c1-bbd2-217391fae325",
                "069e035b-40bc-43ce-ac5a-758a8504939e",
                "e88ae8de-b6d2-41cd-88cb-66d411359ba3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 586,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2d1f33c8-6480-4e0d-9c3c-c21526acc145",
          "title": "Contract Tests",
          "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
          "file": "/test/treasury.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0a817bd5-96ea-4aa7-a2a9-0f55fdf450fa",
              "title": "Management Functions",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "fbbb1121-aa24-4b15-aa3d-ed99a508da4f",
                  "title": "Pausing Related Transitions",
                  "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                  "file": "/test/treasury.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should only allow admin to pause when unpaused",
                      "fullTitle": "Contract Tests Management Functions Pausing Related Transitions should only allow admin to pause when unpaused",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "957414b4-ac81-4d88-80a0-ec882f891584",
                      "parentUUID": "fbbb1121-aa24-4b15-aa3d-ed99a508da4f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should only allow admin to unpause when paused",
                      "fullTitle": "Contract Tests Management Functions Pausing Related Transitions should only allow admin to unpause when paused",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "8fb0d401-cdf9-4d9b-8c5a-5441c2b37601",
                      "parentUUID": "fbbb1121-aa24-4b15-aa3d-ed99a508da4f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not only pausing if not admin",
                      "fullTitle": "Contract Tests Management Functions Pausing Related Transitions should not only pausing if not admin",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "b27763a9-c968-4228-828f-fc68f00d043f",
                      "parentUUID": "fbbb1121-aa24-4b15-aa3d-ed99a508da4f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not only unpausing if not admin",
                      "fullTitle": "Contract Tests Management Functions Pausing Related Transitions should not only unpausing if not admin",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "bd4947d7-5f70-4314-931e-6a732783abe1",
                      "parentUUID": "fbbb1121-aa24-4b15-aa3d-ed99a508da4f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [
                    "957414b4-ac81-4d88-80a0-ec882f891584",
                    "8fb0d401-cdf9-4d9b-8c5a-5441c2b37601",
                    "b27763a9-c968-4228-828f-fc68f00d043f",
                    "bd4947d7-5f70-4314-931e-6a732783abe1"
                  ],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "337b93f3-b30b-4a25-afeb-370d02da7525",
                  "title": "Admin Related Transitions",
                  "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                  "file": "/test/treasury.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow admin to change admin",
                      "fullTitle": "Contract Tests Management Functions Admin Related Transitions should allow admin to change admin",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "f5e887b9-687c-4456-9ed4-043bd094145d",
                      "parentUUID": "337b93f3-b30b-4a25-afeb-370d02da7525",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow changing admin if not admin",
                      "fullTitle": "Contract Tests Management Functions Admin Related Transitions should not allow changing admin if not admin",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "9a33c947-9edb-4b87-a3b1-7a615725317c",
                      "parentUUID": "337b93f3-b30b-4a25-afeb-370d02da7525",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow admin to change company",
                      "fullTitle": "Contract Tests Management Functions Admin Related Transitions should allow admin to change company",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "142cab3e-086e-47c8-998a-aab000ac94f4",
                      "parentUUID": "337b93f3-b30b-4a25-afeb-370d02da7525",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow changing company if not admin",
                      "fullTitle": "Contract Tests Management Functions Admin Related Transitions should not allow changing company if not admin",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "4a82b5d6-3b40-4be3-b9b6-a219eea71f2a",
                      "parentUUID": "337b93f3-b30b-4a25-afeb-370d02da7525",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [
                    "f5e887b9-687c-4456-9ed4-043bd094145d",
                    "9a33c947-9edb-4b87-a3b1-7a615725317c",
                    "142cab3e-086e-47c8-998a-aab000ac94f4",
                    "4a82b5d6-3b40-4be3-b9b6-a219eea71f2a"
                  ],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "quiet": "true",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}