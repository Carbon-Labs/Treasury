{
  "stats": {
    "suites": 10,
    "tests": 43,
    "passes": 14,
    "pending": 28,
    "failures": 1,
    "start": "2020-11-13T08:44:32.613Z",
    "end": "2020-11-13T08:44:34.030Z",
    "duration": 1417,
    "testsRegistered": 43,
    "passPercent": 93.33333333333333,
    "pendingPercent": 65.11627906976744,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fc9337bb-2cb9-4155-8745-efb048f86e9c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0fac9f16-f95c-40bb-af42-7390f41ec02b",
          "title": "Treasury Smart Contract Tests",
          "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
          "file": "/test/treasury.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "eb2acce3-598a-430b-b43d-6ef5fadaff82",
              "title": "Connect to Zilliqa Blockchain",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should run on node version v10",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should run on node version v10",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const node_version = process.version;\nconst ok = (node_version.substring(0,4) == nodeVersion);\nexpect(ok).to.be.true;",
                  "err": {},
                  "uuid": "e5fe024f-45d3-4d07-ae94-a44ac1632112",
                  "parentUUID": "eb2acce3-598a-430b-b43d-6ef5fadaff82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should connect to the blockchain and get the right chain_id",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should connect to the blockchain and get the right chain_id",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "zilliqa = new Zilliqa(network);\nconst network_id = await zilliqa.network.GetNetworkId();\nconst id = parseInt(network_id.result)\nexpect(id).to.equal(chain_id)",
                  "err": {},
                  "uuid": "aa573887-252d-4027-a71e-25b36b8600e0",
                  "parentUUID": "eb2acce3-598a-430b-b43d-6ef5fadaff82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have the right test account",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should have the right test account",
                  "timedOut": false,
                  "duration": 64,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "zilliqa.wallet.addByPrivateKey(adminPrivateKey);\naddress = getAddressFromPrivateKey(adminPrivateKey).toLowerCase();\nconst ok = addressEqual(address, adminAddress);\nexpect(ok).to.be.true;",
                  "err": {},
                  "uuid": "ea1b69d9-0bea-432e-9beb-a6636e2f6781",
                  "parentUUID": "eb2acce3-598a-430b-b43d-6ef5fadaff82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have at least 10 ZIL in the account",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should have at least 10 ZIL in the account",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bal_obj = await zilliqa.blockchain.getBalance(address);\nconst balance_BN = new BN(bal_obj.result.balance);\nconst min_amount_BN = units.toQa(10, units.Units.Zil);\nconst ok = balance_BN.gte(min_amount_BN);\nexpect(ok).to.be.true;",
                  "err": {},
                  "uuid": "5d906e9e-c750-4c1f-a75e-a4e4a7197c43",
                  "parentUUID": "eb2acce3-598a-430b-b43d-6ef5fadaff82",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e5fe024f-45d3-4d07-ae94-a44ac1632112",
                "aa573887-252d-4027-a71e-25b36b8600e0",
                "ea1b69d9-0bea-432e-9beb-a6636e2f6781",
                "5d906e9e-c750-4c1f-a75e-a4e4a7197c43"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 150,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1537e096-0410-408c-8a39-bef00fbafd0a",
              "title": "Deployment Checks",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should read contract source",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should read contract source",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let ok = false;\n      try {\n          code = fs.readFileSync('contracts/treasury.scilla', 'utf-8');\n          ok = true;\n      } catch (err) {\n        throw err \n      }\n      expect(ok).to.be.true;",
                  "err": {},
                  "uuid": "4466ff07-eb37-438e-9d43-613dfc627503",
                  "parentUUID": "1537e096-0410-408c-8a39-bef00fbafd0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should deploy the contract",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should deploy the contract",
                  "timedOut": false,
                  "duration": 309,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(timeout_deploy);\nthis.slow(timeout_deploy / 2);\nconst MSG_VERSION = 1;\nconst VERSION = bytes.pack(chain_id, MSG_VERSION);\nconst myGasPrice = units.toQa('1000', units.Units.Li);\nconst init = [\n  { vname: '_scilla_version', type: 'Uint32', value: '0'},\n  { vname: 'init_admin', type:  'ByStr20', value: address },\n  { vname: 'init_company', type:  'ByStr20', value: address },\n  { vname: 'proxy_address', type:  'ByStr20', value: address },\n  { vname: 'token_address', type:  'ByStr20', value: address },\n  { vname: 'base_value', type:  'Uint128', value: baseValue }\n];\nconst contract = zilliqa.contracts.new(code, init);\n[deployTx, treasury] = await contract.deploy({\n  version: VERSION,\n  gasPrice: myGasPrice,\n  gasLimit: Long.fromNumber(15000),\n});\n//console.log(deployTx);\nconsole.log(\"        contract address =\", treasury.address);\nexpect(deployTx.txParams.receipt.success).to.be.true;",
                  "err": {},
                  "uuid": "22b9238b-ea21-4162-a3ff-44f632a3197d",
                  "parentUUID": "1537e096-0410-408c-8a39-bef00fbafd0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct admin address",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct admin address",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "allState = await treasury.getState();\nexpect(allState.admin).to.equal(address)",
                  "err": {},
                  "uuid": "6e204e20-3444-4461-9b39-7727684a4ae7",
                  "parentUUID": "1537e096-0410-408c-8a39-bef00fbafd0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct company address",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct company address",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(allState.company).to.equal(address)",
                  "err": {},
                  "uuid": "96f71b49-e839-44f8-9283-c982c13960df",
                  "parentUUID": "1537e096-0410-408c-8a39-bef00fbafd0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct base price",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct base price",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bn_price = new BN(allState.token_price);\nexpect(bn_price).to.deep.equal(units.toQa(baseValue, units.Units.Zil))",
                  "err": {},
                  "uuid": "7493139c-b448-490d-8a92-e98fccd1164c",
                  "parentUUID": "1537e096-0410-408c-8a39-bef00fbafd0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be \"paused\" on contract creation",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should be \"paused\" on contract creation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(allState.paused.constructor).to.equal('True')",
                  "err": {},
                  "uuid": "f5ccd6eb-4183-4a91-8aac-7f82f84de955",
                  "parentUUID": "1537e096-0410-408c-8a39-bef00fbafd0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not be \"under funded\" on contract creation",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should not be \"under funded\" on contract creation",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(allState.under_funded.constructor).to.equal('False')",
                  "err": {},
                  "uuid": "118374e9-815a-4e50-bf1a-147a61ba0dc6",
                  "parentUUID": "1537e096-0410-408c-8a39-bef00fbafd0a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4466ff07-eb37-438e-9d43-613dfc627503",
                "22b9238b-ea21-4162-a3ff-44f632a3197d",
                "6e204e20-3444-4461-9b39-7727684a4ae7",
                "96f71b49-e839-44f8-9283-c982c13960df",
                "7493139c-b448-490d-8a92-e98fccd1164c",
                "f5ccd6eb-4183-4a91-8aac-7f82f84de955",
                "118374e9-815a-4e50-bf1a-147a61ba0dc6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 351,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "500b6e5f-5be9-44a6-95f4-cb82d4a979be",
              "title": "Contract Tests",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get the treasury_api",
                  "fullTitle": "Treasury Smart Contract Tests Contract Tests should get the treasury_api",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "treasury_api = new TreasuryAPI(treasury, chain_id);\nexpect(treasury_api).be.instanceOf(TreasuryAPI);",
                  "err": {},
                  "uuid": "7ef71359-8c94-4877-ba2d-37ee1d896124",
                  "parentUUID": "500b6e5f-5be9-44a6-95f4-cb82d4a979be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "d671e957-5093-4dcb-8802-6ded61180414",
                  "title": "Management Functions",
                  "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                  "file": "/test/treasury.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "baa04fa5-a83c-4bfc-91ad-97a0ff22f006",
                      "title": "Pausing Related Transitions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow admin to unpause when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should allow admin to unpause when paused",
                          "timedOut": false,
                          "duration": 268,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.unpauseContract();\nexpect(receipt.success).to.be.true;",
                          "err": {},
                          "uuid": "6681bf4a-263d-41e2-9418-ebb8cb8c877c",
                          "parentUUID": "baa04fa5-a83c-4bfc-91ad-97a0ff22f006",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow admin to pause when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should allow admin to pause when unpaused",
                          "timedOut": false,
                          "duration": 165,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.pauseContract();\n//console.log(receipt);\nexpect(receipt.success).to.be.true;",
                          "err": {},
                          "uuid": "90954f64-4491-4350-8ab0-220a5bfa1181",
                          "parentUUID": "baa04fa5-a83c-4bfc-91ad-97a0ff22f006",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow unpausing if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should not allow unpausing if not admin",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "cf1c7a19-b931-4a03-828e-45523c39a45a",
                          "parentUUID": "baa04fa5-a83c-4bfc-91ad-97a0ff22f006",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow pausing if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should not allow pausing if not admin",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "86d8fb0b-9e12-488d-8621-e6fc2e283dda",
                          "parentUUID": "baa04fa5-a83c-4bfc-91ad-97a0ff22f006",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "6681bf4a-263d-41e2-9418-ebb8cb8c877c",
                        "90954f64-4491-4350-8ab0-220a5bfa1181"
                      ],
                      "failures": [],
                      "pending": [
                        "cf1c7a19-b931-4a03-828e-45523c39a45a",
                        "86d8fb0b-9e12-488d-8621-e6fc2e283dda"
                      ],
                      "skipped": [],
                      "duration": 433,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "894afc82-95df-44cf-a16a-d42246f3031a",
                      "title": "Admin Related Transitions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow admin to change admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should allow admin to change admin",
                          "timedOut": false,
                          "duration": 288,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "//make sure we are calling with current admin\n          zilliqa.wallet.addByPrivateKey(adminPrivateKey);\n          const receipt = await treasury_api.changeAdmin(nonAdminAddress);\n          console.log(receipt);\n          expect(receipt.success).to.be.true;",
                          "err": {
                            "message": "AssertionError: expected false to be true",
                            "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (test/treasury.js:204:40)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                            "diff": "- false\n+ true\n"
                          },
                          "uuid": "3b484142-1bb7-41ea-9428-60a323cb4563",
                          "parentUUID": "894afc82-95df-44cf-a16a-d42246f3031a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow changing admin if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should not allow changing admin if not admin",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "a42ce54f-6bef-4712-bcad-fde36bed0e09",
                          "parentUUID": "894afc82-95df-44cf-a16a-d42246f3031a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow admin to change company",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should allow admin to change company",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "25333db0-e860-4caf-8994-c2f93620cdd5",
                          "parentUUID": "894afc82-95df-44cf-a16a-d42246f3031a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow changing company if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should not allow changing company if not admin",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "cb3dedbc-1737-49ff-989b-e32a59b37378",
                          "parentUUID": "894afc82-95df-44cf-a16a-d42246f3031a",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [
                        "3b484142-1bb7-41ea-9428-60a323cb4563"
                      ],
                      "pending": [
                        "a42ce54f-6bef-4712-bcad-fde36bed0e09",
                        "25333db0-e860-4caf-8994-c2f93620cdd5",
                        "cb3dedbc-1737-49ff-989b-e32a59b37378"
                      ],
                      "skipped": [],
                      "duration": 288,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "b22ccc56-b69b-47c8-bc88-0562990314fb",
                      "title": "Internal Functions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should recalculate exchange rates when receiving ZIL that is not for buying tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Internal Functions should recalculate exchange rates when receiving ZIL that is not for buying tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "b39146ec-ce9d-423f-a4a5-8d7f905eddee",
                          "parentUUID": "b22ccc56-b69b-47c8-bc88-0562990314fb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should recalculate exchange rates when receiving TOKENS that is not for paying invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Internal Functions should recalculate exchange rates when receiving TOKENS that is not for paying invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "cd8dd8c1-c09b-403d-b24d-e30100b919c9",
                          "parentUUID": "b22ccc56-b69b-47c8-bc88-0562990314fb",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "b39146ec-ce9d-423f-a4a5-8d7f905eddee",
                        "cd8dd8c1-c09b-403d-b24d-e30100b919c9"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "461b245a-4407-4f05-8f34-a1e167030628",
                      "title": "Trading Features",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should not allow buying of tokens when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow buying of tokens when paused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "f9c63a1f-e5ea-4247-afe2-e7707284113f",
                          "parentUUID": "461b245a-4407-4f05-8f34-a1e167030628",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow selling of tokens when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow selling of tokens when paused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "6ceb0021-654c-44a2-b450-d072394b24db",
                          "parentUUID": "461b245a-4407-4f05-8f34-a1e167030628",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow buying of tokens when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should allow buying of tokens when unpaused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "d87c34b7-2d72-49e5-b7b5-0bbca0e08f87",
                          "parentUUID": "461b245a-4407-4f05-8f34-a1e167030628",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow selling of tokens when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should allow selling of tokens when unpaused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "d5632716-0639-4473-9097-0389c4e402b6",
                          "parentUUID": "461b245a-4407-4f05-8f34-a1e167030628",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow selling more tokens than you have",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow selling more tokens than you have",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "5542bd4a-1337-4ff7-83e8-4a0ddfd730fe",
                          "parentUUID": "461b245a-4407-4f05-8f34-a1e167030628",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should issue correct amount of tokens when buying tokens with 1 ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should issue correct amount of tokens when buying tokens with 1 ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "a5817c20-c3f1-41e9-aec2-f96381e4ec65",
                          "parentUUID": "461b245a-4407-4f05-8f34-a1e167030628",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should send the correct amount of ZIL to you after selling tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should send the correct amount of ZIL to you after selling tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "23de422c-4053-48bb-a5b5-169a0ea5829c",
                          "parentUUID": "461b245a-4407-4f05-8f34-a1e167030628",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "f9c63a1f-e5ea-4247-afe2-e7707284113f",
                        "6ceb0021-654c-44a2-b450-d072394b24db",
                        "d87c34b7-2d72-49e5-b7b5-0bbca0e08f87",
                        "d5632716-0639-4473-9097-0389c4e402b6",
                        "5542bd4a-1337-4ff7-83e8-4a0ddfd730fe",
                        "a5817c20-c3f1-41e9-aec2-f96381e4ec65",
                        "23de422c-4053-48bb-a5b5-169a0ea5829c"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "d6cd4154-3b33-4069-b171-63efd3fb77fd",
                      "title": "Invoicing Features",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow creating new invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow creating new invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "993283e7-73eb-4392-92fe-6becf652b3af",
                          "parentUUID": "d6cd4154-3b33-4069-b171-63efd3fb77fd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should only allow admin to cancel an invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should only allow admin to cancel an invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "d2d9a074-8bd8-4b92-ac42-0a97070e8aca",
                          "parentUUID": "d6cd4154-3b33-4069-b171-63efd3fb77fd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should error when trying to cancel an invoice that does not exist",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should error when trying to cancel an invoice that does not exist",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "c7c964c8-38cc-49f0-a8a9-2f56a7d65e88",
                          "parentUUID": "d6cd4154-3b33-4069-b171-63efd3fb77fd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be partially paid with tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be partially paid with tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "cafc4246-ba3d-444f-b490-8a064f3d47f5",
                          "parentUUID": "d6cd4154-3b33-4069-b171-63efd3fb77fd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be paid in full with tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be paid in full with tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "46c2963d-6d47-42da-990c-40bab4e49053",
                          "parentUUID": "d6cd4154-3b33-4069-b171-63efd3fb77fd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be partially paid with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be partially paid with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "84f91b70-f478-498a-9e43-fd4e7f6f1db2",
                          "parentUUID": "d6cd4154-3b33-4069-b171-63efd3fb77fd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be paid in full with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be paid in full with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "20dcd6ac-67c9-4bd5-82ea-88208c8050d0",
                          "parentUUID": "d6cd4154-3b33-4069-b171-63efd3fb77fd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be partially paid with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be partially paid with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "ff5df88c-de7b-4f77-8ba0-6defbd3b4ae6",
                          "parentUUID": "d6cd4154-3b33-4069-b171-63efd3fb77fd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be paid in full with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be paid in full with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "9fb5bee7-41f6-494b-8e88-a5da1b444949",
                          "parentUUID": "d6cd4154-3b33-4069-b171-63efd3fb77fd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should issue new tokens if invoice is overpaid with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should issue new tokens if invoice is overpaid with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "75f6c25f-69bf-436d-b2a5-027f04060185",
                          "parentUUID": "d6cd4154-3b33-4069-b171-63efd3fb77fd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be overpaid with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be overpaid with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "a2c17ffb-2551-44cf-b05b-af38bdf3f8c9",
                          "parentUUID": "d6cd4154-3b33-4069-b171-63efd3fb77fd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow multiple payments against an invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow multiple payments against an invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "e85f7d37-1c61-4edd-871d-48b0ac02dc95",
                          "parentUUID": "d6cd4154-3b33-4069-b171-63efd3fb77fd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should only consume the correct amount of tokens when invoice is overpaid",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should only consume the correct amount of tokens when invoice is overpaid",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "bf22cc9e-0467-4b49-8ba3-767e4a5ead03",
                          "parentUUID": "d6cd4154-3b33-4069-b171-63efd3fb77fd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow payments against fully paid invoices",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should not allow payments against fully paid invoices",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "63f67c76-5942-4e22-b810-3f452c0d5482",
                          "parentUUID": "d6cd4154-3b33-4069-b171-63efd3fb77fd",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "993283e7-73eb-4392-92fe-6becf652b3af",
                        "d2d9a074-8bd8-4b92-ac42-0a97070e8aca",
                        "c7c964c8-38cc-49f0-a8a9-2f56a7d65e88",
                        "cafc4246-ba3d-444f-b490-8a064f3d47f5",
                        "46c2963d-6d47-42da-990c-40bab4e49053",
                        "84f91b70-f478-498a-9e43-fd4e7f6f1db2",
                        "20dcd6ac-67c9-4bd5-82ea-88208c8050d0",
                        "ff5df88c-de7b-4f77-8ba0-6defbd3b4ae6",
                        "9fb5bee7-41f6-494b-8e88-a5da1b444949",
                        "75f6c25f-69bf-436d-b2a5-027f04060185",
                        "a2c17ffb-2551-44cf-b05b-af38bdf3f8c9",
                        "e85f7d37-1c61-4edd-871d-48b0ac02dc95",
                        "bf22cc9e-0467-4b49-8ba3-767e4a5ead03",
                        "63f67c76-5942-4e22-b810-3f452c0d5482"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 100000
                }
              ],
              "passes": [
                "7ef71359-8c94-4877-ba2d-37ee1d896124"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "quiet": "true",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}