{
  "stats": {
    "suites": 10,
    "tests": 39,
    "passes": 16,
    "pending": 22,
    "failures": 1,
    "start": "2020-11-19T05:26:38.432Z",
    "end": "2020-11-19T05:26:42.730Z",
    "duration": 4298,
    "testsRegistered": 39,
    "passPercent": 94.11764705882352,
    "pendingPercent": 56.41025641025641,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "009edeea-0ba9-407f-b58c-05e238f23f51",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 402,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "zilliqa = new Zilliqa(network);\nnetwork_id = await zilliqa.network.GetNetworkId();\n// Check that we are using correct address\nzilliqa.wallet.addByPrivateKey(adminPrivateKey);\naddress = getAddressFromPrivateKey(adminPrivateKey).toLowerCase();\nconst addressCheck = addressEqual(address, adminAddress);\nexpect(addressCheck).to.be.true;\n// Check address has at least 10 ZIL\nconst bal_obj = await zilliqa.blockchain.getBalance(address);\nconst balance_BN = new BN(bal_obj.result.balance);\nconst min_amount_BN = units.toQa(10, units.Units.Zil);\nlet ok = balance_BN.gte(min_amount_BN);\nexpect(ok).to.be.true;\n// Read contract address\nok = false;\ntry {\n  code = fs.readFileSync('contracts/treasury.scilla', 'utf-8');\n  ok = true;\n} catch (err) {\n  throw err \n}\nexpect(ok).to.be.true;\n// Deploy the contract\nthis.timeout(timeout_deploy);\nthis.slow(timeout_deploy / 2);\nconst MSG_VERSION = 1;\nconst VERSION = bytes.pack(chain_id, MSG_VERSION);\nconst myGasPrice = units.toQa('1000', units.Units.Li);\nconst init = [\n  { vname: '_scilla_version', type: 'Uint32', value: '0'},\n  { vname: 'init_admin', type:  'ByStr20', value: address },\n  { vname: 'init_company', type:  'ByStr20', value: address },\n  { vname: 'proxy_address', type:  'ByStr20', value: address },\n  { vname: 'token_address', type:  'ByStr20', value: address },\n  { vname: 'base_value', type:  'Uint128', value: baseValue }\n];\nconst contract = zilliqa.contracts.new(code, init);\n[deployTx, treasury] = await contract.deploy({\n  version: VERSION,\n  gasPrice: myGasPrice,\n  gasLimit: Long.fromNumber(15000),\n});\nconsole.log(\"Deployed Contract Address =\", treasury.address);\nexpect(deployTx.txParams.receipt.success).to.be.true;\ntreasury_api = new TreasuryAPI(treasury, chain_id);\nexpect(treasury_api).be.instanceOf(TreasuryAPI);",
          "err": {},
          "uuid": "0bbe6d72-2c70-4f2f-87ec-3dc035247b47",
          "parentUUID": "009edeea-0ba9-407f-b58c-05e238f23f51",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 103,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "//Reset admin\n  treasury_api.setSigningAddress(adminPrivateKey); //@todo - we need to read the current admin and do look up for private key\n  resp = await treasury_api.changeAdmin(adminAddress);\n  expect(resp.success).to.be.true;",
          "err": {},
          "uuid": "38409d03-7c58-4a71-b6c6-e051d5b297c3",
          "parentUUID": "009edeea-0ba9-407f-b58c-05e238f23f51",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ec505b7c-f0a7-4443-8824-74bf4c5aba8e",
          "title": "Treasury Smart Contract Tests",
          "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
          "file": "/test/treasury.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d65598c4-98b6-4d54-b0df-d2475194a671",
              "title": "Connect to Zilliqa Blockchain",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should run on node version v10",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should run on node version v10",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const node_version = process.version;\nconst nodeVersionCheck = (node_version.substring(0,4) == nodeVersion);\nexpect(nodeVersionCheck).to.be.true;",
                  "err": {},
                  "uuid": "2bc02453-134b-46d1-b1b5-45b8d869bbce",
                  "parentUUID": "d65598c4-98b6-4d54-b0df-d2475194a671",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should connect to the blockchain and get the right chain_id",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should connect to the blockchain and get the right chain_id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = parseInt(network_id.result)\nexpect(id).to.equal(chain_id)",
                  "err": {},
                  "uuid": "414efd5c-c0d2-4917-a694-60191555d78d",
                  "parentUUID": "d65598c4-98b6-4d54-b0df-d2475194a671",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2bc02453-134b-46d1-b1b5-45b8d869bbce",
                "414efd5c-c0d2-4917-a694-60191555d78d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0f09d99a-e62e-499f-abe4-9a74eea7e1ef",
              "title": "Deployment Checks",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have correct admin address",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct admin address",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "allState = await treasury.getState();\nexpect(allState.admin).to.equal(address)",
                  "err": {},
                  "uuid": "16742eed-42fe-4c0a-8aff-d682770d5efe",
                  "parentUUID": "0f09d99a-e62e-499f-abe4-9a74eea7e1ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct company address",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct company address",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(allState.company).to.equal(address)",
                  "err": {},
                  "uuid": "aade3743-97aa-43cb-8a40-be367a713837",
                  "parentUUID": "0f09d99a-e62e-499f-abe4-9a74eea7e1ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct base price",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct base price",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bn_price = new BN(allState.tokenPrice);\nexpect(bn_price).to.deep.equal(units.toQa(baseValue, units.Units.Zil))",
                  "err": {},
                  "uuid": "3026726f-b6aa-457a-974e-4644a32083fe",
                  "parentUUID": "0f09d99a-e62e-499f-abe4-9a74eea7e1ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have 0 tokens",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have 0 tokens",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const num_tokens = allState.tokenBalance;\nexpect(num_tokens).to.equal('0')",
                  "err": {},
                  "uuid": "f87f1dae-0769-4355-a46d-b8d8928d2b6e",
                  "parentUUID": "0f09d99a-e62e-499f-abe4-9a74eea7e1ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be \"paused\" on contract creation",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should be \"paused\" on contract creation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(allState.paused.constructor).to.equal('True')",
                  "err": {},
                  "uuid": "09294063-2157-4c91-b51c-979df955931c",
                  "parentUUID": "0f09d99a-e62e-499f-abe4-9a74eea7e1ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not be \"under funded\" on contract creation",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should not be \"under funded\" on contract creation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(allState.underFunded.constructor).to.equal('False')",
                  "err": {},
                  "uuid": "30dcc611-6278-4193-85e2-920b9cc0b725",
                  "parentUUID": "0f09d99a-e62e-499f-abe4-9a74eea7e1ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16742eed-42fe-4c0a-8aff-d682770d5efe",
                "aade3743-97aa-43cb-8a40-be367a713837",
                "3026726f-b6aa-457a-974e-4644a32083fe",
                "f87f1dae-0769-4355-a46d-b8d8928d2b6e",
                "09294063-2157-4c91-b51c-979df955931c",
                "30dcc611-6278-4193-85e2-920b9cc0b725"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ff20f2d-f611-48fe-8eac-d200a8b3ebab",
              "title": "Contract Tests",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "b8826c6d-02a1-422e-9be3-cf81003db681",
                  "title": "Management Functions",
                  "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                  "file": "/test/treasury.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "a44874b8-ce08-4917-96fb-767304fd630d",
                      "title": "Pausing Related Transitions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow admin to unpause when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should allow admin to unpause when paused",
                          "timedOut": false,
                          "duration": 88,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.unpauseContract();\nexpect(receipt.success).to.be.true;",
                          "err": {},
                          "uuid": "cfb9698a-17b3-46bd-ae25-c0a55385d91c",
                          "parentUUID": "a44874b8-ce08-4917-96fb-767304fd630d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow admin to pause when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should allow admin to pause when unpaused",
                          "timedOut": false,
                          "duration": 109,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.pauseContract();\nexpect(receipt.success).to.be.true;",
                          "err": {},
                          "uuid": "9a469f26-5ec8-4799-86b3-46a79bff83b2",
                          "parentUUID": "a44874b8-ce08-4917-96fb-767304fd630d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow unpausing if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should not allow unpausing if not admin",
                          "timedOut": false,
                          "duration": 223,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "exceptionCode = 'Int32 -1';\n          const receipt = await treasury_api.pauseContract();         //make sure it is paused first\n          expect(receipt.success).to.be.true;\n          \n          await treasury_api.setSigningAddress(nonAdminPrivateKey)    // change txn signer to non adming...\n          const receipt2 = await treasury_api.unpauseContract();      // ...and attempt to unpause\n          \n          checkException(receipt2, exceptionCode);\n          expect(receipt2.success).to.be.false;                       // txn should have failed",
                          "err": {},
                          "uuid": "334b5127-4dec-4092-9b70-b341cc93e71c",
                          "parentUUID": "a44874b8-ce08-4917-96fb-767304fd630d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow pausing if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should not allow pausing if not admin",
                          "timedOut": false,
                          "duration": 205,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "exceptionCode = 'Int32 -1';\nconst receipt = await treasury_api.unpauseContract();       //make sure it is unpaused first\nexpect(receipt.success).to.be.true;\n\nawait treasury_api.setSigningAddress(nonAdminPrivateKey)    // change txn signer to non adming...\nconst receipt2 = await treasury_api.pauseContract();        // ...and attempt to unpause\n\ncheckException(receipt2, exceptionCode);\nexpect(receipt2.success).to.be.false;                       // txn should have failed",
                          "err": {},
                          "uuid": "2da150ca-6d54-44b9-afdc-064d96f4e1e1",
                          "parentUUID": "a44874b8-ce08-4917-96fb-767304fd630d",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "cfb9698a-17b3-46bd-ae25-c0a55385d91c",
                        "9a469f26-5ec8-4799-86b3-46a79bff83b2",
                        "334b5127-4dec-4092-9b70-b341cc93e71c",
                        "2da150ca-6d54-44b9-afdc-064d96f4e1e1"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 625,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "73fe8acb-b8dc-4a83-9056-ae299c206781",
                      "title": "Admin Related Transitions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow admin to change admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should allow admin to change admin",
                          "timedOut": false,
                          "duration": 302,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// test invalid address fails\n          const receipt1 = await treasury_api.changeAdmin(\"InvalidAddress\");\n          expect(receipt1.success).to.be.false;\n          // test valid address succeeds\n          const receipt2 = await treasury_api.changeAdmin(nonAdminAddress);\n          expect(receipt2.success).to.be.true; \n          //reset back to original admin\n          await treasury_api.setSigningAddress(nonAdminPrivateKey)          \n          const receipt3 = await treasury_api.changeAdmin(adminAddress);\n          expect(receipt3.success).to.be.true;",
                          "err": {},
                          "uuid": "f4c8bb70-fbca-4b51-9e27-8569b2b8d8d0",
                          "parentUUID": "73fe8acb-b8dc-4a83-9056-ae299c206781",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow changing admin if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should not allow changing admin if not admin",
                          "timedOut": false,
                          "duration": 310,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "exceptionCode = 'Int32 -1';          \n          await treasury_api.setSigningAddress(nonAdminPrivateKey)          // change txn signer to non admin...\n          const receipt2 = await treasury_api.changeAdmin(nonAdminAddress); // ...and attempt to change admin\n          //console.log(receipt2);\n          checkException(receipt2, exceptionCode);\n          \n          expect(receipt2.success).to.be.false;                             // txn should have failed",
                          "err": {},
                          "uuid": "37e9acf0-7fc4-45ac-8540-359b1722f75a",
                          "parentUUID": "73fe8acb-b8dc-4a83-9056-ae299c206781",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow admin to change company",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should allow admin to change company",
                          "timedOut": false,
                          "duration": 187,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.changeCompany(nonAdminAddress);\n//console.log(receipt);\nexpect(receipt.success).to.be.true;\n//need to confirm that company address has been set correctly.\nconst contractCompanyAddress = await treasury_api.getCompanyAddress();\n//console.log(contractCompanyAddress);\nexpect(contractCompanyAddress).to.equal(nonAdminAddress);",
                          "err": {},
                          "uuid": "d46d4d33-f13d-4194-87fa-68d7aef081ec",
                          "parentUUID": "73fe8acb-b8dc-4a83-9056-ae299c206781",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow changing company if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should not allow changing company if not admin",
                          "timedOut": false,
                          "duration": 116,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "exceptionCode = 'Int32 -1';          \nawait treasury_api.setSigningAddress(nonAdminPrivateKey)          // change txn signer to non admin...\nconst receipt = await treasury_api.changeCompany(nonAdminAddress); // ...and attempt to change admin\ncheckException(receipt, exceptionCode);\n\nexpect(receipt.success).to.be.false;                             // txn should have failed",
                          "err": {},
                          "uuid": "a7aca6d4-fcd7-4e75-9aee-7163b8360bd2",
                          "parentUUID": "73fe8acb-b8dc-4a83-9056-ae299c206781",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "f4c8bb70-fbca-4b51-9e27-8569b2b8d8d0",
                        "37e9acf0-7fc4-45ac-8540-359b1722f75a",
                        "d46d4d33-f13d-4194-87fa-68d7aef081ec",
                        "a7aca6d4-fcd7-4e75-9aee-7163b8360bd2"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 915,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "cc73a7a7-cbdb-4b61-9bd2-4dbacd32d0b5",
                      "title": "Internal Functions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should recalculate exchange rates when receiving ZIL that is not for buying tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Internal Functions should recalculate exchange rates when receiving ZIL that is not for buying tokens",
                          "timedOut": false,
                          "duration": 67,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "zilBalance = await treasury_api.getZilBalance();\ntokenBalance = await treasury_api.getTokenBalance();\nzilPrice = await treasury_api.getZilPrice();\ntokenPrice = await treasury_api.getTokenPrice();\nif(debugMode) {\n  console.log(\"Zil: \", zilBalance);\n  console.log(\"Tokens: \", tokenBalance);\n  console.log(\"Zil Price: \", zilPrice);\n  console.log(\"Token Price: \", tokenPrice);\n}\nexpect(true).to.be.false;",
                          "err": {
                            "message": "AssertionError: expected true to be false",
                            "estack": "AssertionError: expected true to be false\n    at Context.<anonymous> (test/treasury.js:305:31)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                            "diff": "- true\n+ false\n"
                          },
                          "uuid": "6dd39be1-1910-488c-ab73-f6a1583611b4",
                          "parentUUID": "cc73a7a7-cbdb-4b61-9bd2-4dbacd32d0b5",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should recalculate exchange rates when receiving TOKENS that is not for paying invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Internal Functions should recalculate exchange rates when receiving TOKENS that is not for paying invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "70e6b38b-437f-453d-9ab1-c29afe8fafb3",
                          "parentUUID": "cc73a7a7-cbdb-4b61-9bd2-4dbacd32d0b5",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [
                        "6dd39be1-1910-488c-ab73-f6a1583611b4"
                      ],
                      "pending": [
                        "70e6b38b-437f-453d-9ab1-c29afe8fafb3"
                      ],
                      "skipped": [],
                      "duration": 67,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "a4084c0e-bfd1-4d7c-a450-692a3525a301",
                      "title": "Trading Features",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should not allow buying of tokens when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow buying of tokens when paused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "eb1e6596-ddc5-4b5d-9b35-14cab4fadbcd",
                          "parentUUID": "a4084c0e-bfd1-4d7c-a450-692a3525a301",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow selling of tokens when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow selling of tokens when paused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "703656a8-34dc-48c5-bc8f-352068d126bf",
                          "parentUUID": "a4084c0e-bfd1-4d7c-a450-692a3525a301",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow buying of tokens when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should allow buying of tokens when unpaused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "a26e714f-ba76-41a9-b27f-866ae0c7072e",
                          "parentUUID": "a4084c0e-bfd1-4d7c-a450-692a3525a301",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow selling of tokens when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should allow selling of tokens when unpaused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "d18016f4-0106-464f-ac31-47ad41d5e36d",
                          "parentUUID": "a4084c0e-bfd1-4d7c-a450-692a3525a301",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow selling more tokens than you have",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow selling more tokens than you have",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "bee1085f-fe8e-440d-9f5f-0418400e794c",
                          "parentUUID": "a4084c0e-bfd1-4d7c-a450-692a3525a301",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should issue correct amount of tokens when buying tokens with 1 ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should issue correct amount of tokens when buying tokens with 1 ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "91cca836-5da2-4488-8c16-f5a1e6601155",
                          "parentUUID": "a4084c0e-bfd1-4d7c-a450-692a3525a301",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should send the correct amount of ZIL to you after selling tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should send the correct amount of ZIL to you after selling tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "969ef044-ee02-428a-9d2c-600ceb2d3584",
                          "parentUUID": "a4084c0e-bfd1-4d7c-a450-692a3525a301",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "eb1e6596-ddc5-4b5d-9b35-14cab4fadbcd",
                        "703656a8-34dc-48c5-bc8f-352068d126bf",
                        "a26e714f-ba76-41a9-b27f-866ae0c7072e",
                        "d18016f4-0106-464f-ac31-47ad41d5e36d",
                        "bee1085f-fe8e-440d-9f5f-0418400e794c",
                        "91cca836-5da2-4488-8c16-f5a1e6601155",
                        "969ef044-ee02-428a-9d2c-600ceb2d3584"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "18dee731-c5e0-44ef-9e81-683565655f12",
                      "title": "Invoicing Features",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow creating new invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow creating new invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "8dc9f16e-b9d8-42cc-aa31-ed772fd4baf0",
                          "parentUUID": "18dee731-c5e0-44ef-9e81-683565655f12",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should only allow admin to cancel an invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should only allow admin to cancel an invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "6e80a7ce-31a0-4504-a2c3-043e5af26365",
                          "parentUUID": "18dee731-c5e0-44ef-9e81-683565655f12",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should error when trying to cancel an invoice that does not exist",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should error when trying to cancel an invoice that does not exist",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "355e5a20-7faa-4d93-9f0a-b38e1fca49bb",
                          "parentUUID": "18dee731-c5e0-44ef-9e81-683565655f12",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be partially paid with tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be partially paid with tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "48f6a8d4-b162-4351-892f-f65194929829",
                          "parentUUID": "18dee731-c5e0-44ef-9e81-683565655f12",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be paid in full with tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be paid in full with tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "4026db57-de9f-41f8-bff4-59f2d172605f",
                          "parentUUID": "18dee731-c5e0-44ef-9e81-683565655f12",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be partially paid with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be partially paid with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "59fb943a-2340-4d69-b76d-9cb13930534f",
                          "parentUUID": "18dee731-c5e0-44ef-9e81-683565655f12",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be paid in full with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be paid in full with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "09a70bb7-9672-491c-a6c0-6b9319524612",
                          "parentUUID": "18dee731-c5e0-44ef-9e81-683565655f12",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be partially paid with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be partially paid with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "35cc1973-92ac-4be1-b0db-2bbbd731a691",
                          "parentUUID": "18dee731-c5e0-44ef-9e81-683565655f12",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be paid in full with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be paid in full with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "d14fe569-63dc-4745-87c1-2ffccf6b5ea7",
                          "parentUUID": "18dee731-c5e0-44ef-9e81-683565655f12",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should issue new tokens if invoice is overpaid with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should issue new tokens if invoice is overpaid with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "4046b263-5193-4972-b1dc-c8f6440b848a",
                          "parentUUID": "18dee731-c5e0-44ef-9e81-683565655f12",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be overpaid with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be overpaid with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "6ef38d6b-8e58-40e3-8f1d-2014ff553bcf",
                          "parentUUID": "18dee731-c5e0-44ef-9e81-683565655f12",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow multiple payments against an invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow multiple payments against an invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "03365d51-ddc7-4142-8ca7-0a9eab016fb5",
                          "parentUUID": "18dee731-c5e0-44ef-9e81-683565655f12",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should only consume the correct amount of tokens when invoice is overpaid",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should only consume the correct amount of tokens when invoice is overpaid",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "acacdd9d-35ec-42ef-a6af-79ae3535f184",
                          "parentUUID": "18dee731-c5e0-44ef-9e81-683565655f12",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow payments against fully paid invoices",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should not allow payments against fully paid invoices",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "5f32fbee-2563-4053-b848-0c6229acd56d",
                          "parentUUID": "18dee731-c5e0-44ef-9e81-683565655f12",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "8dc9f16e-b9d8-42cc-aa31-ed772fd4baf0",
                        "6e80a7ce-31a0-4504-a2c3-043e5af26365",
                        "355e5a20-7faa-4d93-9f0a-b38e1fca49bb",
                        "48f6a8d4-b162-4351-892f-f65194929829",
                        "4026db57-de9f-41f8-bff4-59f2d172605f",
                        "59fb943a-2340-4d69-b76d-9cb13930534f",
                        "09a70bb7-9672-491c-a6c0-6b9319524612",
                        "35cc1973-92ac-4be1-b0db-2bbbd731a691",
                        "d14fe569-63dc-4745-87c1-2ffccf6b5ea7",
                        "4046b263-5193-4972-b1dc-c8f6440b848a",
                        "6ef38d6b-8e58-40e3-8f1d-2014ff553bcf",
                        "03365d51-ddc7-4142-8ca7-0a9eab016fb5",
                        "acacdd9d-35ec-42ef-a6af-79ae3535f184",
                        "5f32fbee-2563-4053-b848-0c6229acd56d"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 100000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "quiet": "true",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}