{
  "stats": {
    "suites": 10,
    "tests": 39,
    "passes": 17,
    "pending": 20,
    "failures": 2,
    "start": "2020-11-19T10:53:30.053Z",
    "end": "2020-11-19T10:53:37.443Z",
    "duration": 7390,
    "testsRegistered": 39,
    "passPercent": 89.47368421052632,
    "pendingPercent": 51.28205128205128,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "dee01c16-4e77-460e-8639-3c2f0941cd75",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 492,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "zilliqa = new Zilliqa(network);\nnetwork_id = await zilliqa.network.GetNetworkId();\n// Check that we are using correct address\nzilliqa.wallet.addByPrivateKey(adminPrivateKey);\naddress = getAddressFromPrivateKey(adminPrivateKey).toLowerCase();\nconst addressCheck = addressEqual(address, adminAddress);\nexpect(addressCheck).to.be.true;\n// Check address has at least 10 ZIL\nconst bal_obj = await zilliqa.blockchain.getBalance(address);\nconst balance_BN = new BN(bal_obj.result.balance);\nconst min_amount_BN = units.toQa(10, units.Units.Zil);\nlet ok = balance_BN.gte(min_amount_BN);\nexpect(ok).to.be.true;\n// Read contract address\nok = false;\ntry {\n  code = fs.readFileSync('contracts/treasury.scilla', 'utf-8');\n  ok = true;\n} catch (err) {\n  throw err \n}\nexpect(ok).to.be.true;\n// Deploy the contract\nthis.timeout(timeout_deploy);\nthis.slow(timeout_deploy / 2);\nconst MSG_VERSION = 1;\nconst VERSION = bytes.pack(chain_id, MSG_VERSION);\nconst myGasPrice = units.toQa('1000', units.Units.Li);\nconst init = [\n  { vname: '_scilla_version', type: 'Uint32', value: '0'},\n  { vname: 'init_admin', type:  'ByStr20', value: address },\n  { vname: 'init_company', type:  'ByStr20', value: address },\n  { vname: 'proxy_address', type:  'ByStr20', value: address },\n  { vname: 'token_address', type:  'ByStr20', value: address },\n  { vname: 'base_value', type:  'Uint128', value: baseValue }\n];\nconst contract = zilliqa.contracts.new(code, init);\n[deployTx, treasury] = await contract.deploy({\n  version: VERSION,\n  gasPrice: myGasPrice,\n  gasLimit: Long.fromNumber(15000),\n});\nconsole.log(\"Deployed Contract Address =\", treasury.address);\nexpect(deployTx.txParams.receipt.success).to.be.true;\ntreasury_api = new TreasuryAPI(treasury, chain_id);\nexpect(treasury_api).be.instanceOf(TreasuryAPI);",
          "err": {},
          "uuid": "df05e980-daa5-4fa3-b5cb-c4fa1f0379dc",
          "parentUUID": "dee01c16-4e77-460e-8639-3c2f0941cd75",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 240,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "//Reset admin\n  treasury_api.setSigningAddress(adminPrivateKey); //@todo - we need to read the current admin and do look up for private key\n  resp = await treasury_api.changeAdmin(adminAddress);\n  expect(resp.success).to.be.true;",
          "err": {},
          "uuid": "fb3b4dfa-8937-4d42-81b7-d47d1c9aba80",
          "parentUUID": "dee01c16-4e77-460e-8639-3c2f0941cd75",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "81d1a041-d5ff-4afb-b847-567703e95876",
          "title": "Treasury Smart Contract Tests",
          "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
          "file": "/test/treasury.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "465ce1da-6967-4726-9062-7f739013baab",
              "title": "Connect to Zilliqa Blockchain",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should run on node version v10",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should run on node version v10",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const node_version = process.version;\nconst nodeVersionCheck = (node_version.substring(0,4) == nodeVersion);\nexpect(nodeVersionCheck).to.be.true;",
                  "err": {},
                  "uuid": "0fb4e70b-5399-4c50-9c74-6a95adbb2ea5",
                  "parentUUID": "465ce1da-6967-4726-9062-7f739013baab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should connect to the blockchain and get the right chain_id",
                  "fullTitle": "Treasury Smart Contract Tests Connect to Zilliqa Blockchain should connect to the blockchain and get the right chain_id",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = parseInt(network_id.result)\nexpect(id).to.equal(chain_id)",
                  "err": {},
                  "uuid": "ff83456c-5c4f-4a8c-8e70-a2fec09fd261",
                  "parentUUID": "465ce1da-6967-4726-9062-7f739013baab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0fb4e70b-5399-4c50-9c74-6a95adbb2ea5",
                "ff83456c-5c4f-4a8c-8e70-a2fec09fd261"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5404c81f-6210-4785-a6be-72efdf15487f",
              "title": "Deployment Checks",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should have correct admin address",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct admin address",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contractAdminAddress = await treasury_api.getAdmin();\nexpect(contractAdminAddress).to.equal(address)",
                  "err": {},
                  "uuid": "7415ccfd-1d39-4fdf-9305-810138e23606",
                  "parentUUID": "5404c81f-6210-4785-a6be-72efdf15487f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct company address",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct company address",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contractCompanyAddress = await treasury_api.getCompany();\nexpect(contractCompanyAddress).to.equal(address)",
                  "err": {},
                  "uuid": "3af0d5de-dfa6-477e-b0e9-07b6142f9005",
                  "parentUUID": "5404c81f-6210-4785-a6be-72efdf15487f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct base price",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have correct base price",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const price = await treasury_api.getTokenPrice();\nconst bn_price = new BN(price);\nexpect(bn_price).to.deep.equal(units.toQa(baseValue, units.Units.Zil))",
                  "err": {},
                  "uuid": "b2af07e6-eb74-4819-b8aa-4aea7526132b",
                  "parentUUID": "5404c81f-6210-4785-a6be-72efdf15487f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have 0 tokens",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should have 0 tokens",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const num_tokens = await treasury_api.getTokenBalance();\nexpect(num_tokens).to.equal('0')",
                  "err": {},
                  "uuid": "da4163c3-0145-4d7b-b6bc-1e77adbfaa88",
                  "parentUUID": "5404c81f-6210-4785-a6be-72efdf15487f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be \"paused\" on contract creation",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should be \"paused\" on contract creation",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pausedStatus = await treasury_api.isPaused();\nexpect(pausedStatus).to.equal('True')",
                  "err": {},
                  "uuid": "534f9ae1-7127-4b4d-9aac-21b6c1ae30b4",
                  "parentUUID": "5404c81f-6210-4785-a6be-72efdf15487f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not be \"under funded\" on contract creation",
                  "fullTitle": "Treasury Smart Contract Tests Deployment Checks should not be \"under funded\" on contract creation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(allState.underFunded.constructor).to.equal('False')",
                  "err": {
                    "message": "TypeError: Cannot read property 'constructor' of undefined",
                    "estack": "TypeError: Cannot read property 'constructor' of undefined\n    at Context.<anonymous> (test/treasury.js:182:35)",
                    "diff": null
                  },
                  "uuid": "3b454395-55f7-45af-a5cd-dfe003e914a7",
                  "parentUUID": "5404c81f-6210-4785-a6be-72efdf15487f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7415ccfd-1d39-4fdf-9305-810138e23606",
                "3af0d5de-dfa6-477e-b0e9-07b6142f9005",
                "b2af07e6-eb74-4819-b8aa-4aea7526132b",
                "da4163c3-0145-4d7b-b6bc-1e77adbfaa88",
                "534f9ae1-7127-4b4d-9aac-21b6c1ae30b4"
              ],
              "failures": [
                "3b454395-55f7-45af-a5cd-dfe003e914a7"
              ],
              "pending": [],
              "skipped": [],
              "duration": 117,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6741e3cf-e702-4704-b8aa-ffda6c47ea5e",
              "title": "Contract Tests",
              "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
              "file": "/test/treasury.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "b4879981-9505-4f46-8c85-e5ca2d0b92ab",
                  "title": "Management Functions",
                  "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                  "file": "/test/treasury.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "aad762bb-5036-4e6d-9785-666c679f2436",
                      "title": "Pausing Related Transitions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow admin to unpause when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should allow admin to unpause when paused",
                          "timedOut": false,
                          "duration": 132,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.unpauseContract();\nexpect(receipt.success).to.be.true;",
                          "err": {},
                          "uuid": "759957f3-b2f6-466f-abca-090c82cd9f20",
                          "parentUUID": "aad762bb-5036-4e6d-9785-666c679f2436",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow admin to pause when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should allow admin to pause when unpaused",
                          "timedOut": false,
                          "duration": 142,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.pauseContract();\nexpect(receipt.success).to.be.true;",
                          "err": {},
                          "uuid": "3ecfd990-932e-4fc2-a6db-e605bb3f0330",
                          "parentUUID": "aad762bb-5036-4e6d-9785-666c679f2436",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow unpausing if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should not allow unpausing if not admin",
                          "timedOut": false,
                          "duration": 326,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "exceptionCode = 'Int32 -1';\n          const receipt = await treasury_api.pauseContract();         //make sure it is paused first\n          expect(receipt.success).to.be.true;\n          \n          await treasury_api.setSigningAddress(nonAdminPrivateKey)    // change txn signer to non adming...\n          const receipt2 = await treasury_api.unpauseContract();      // ...and attempt to unpause\n          \n          checkException(receipt2, exceptionCode);\n          expect(receipt2.success).to.be.false;                       // txn should have failed",
                          "err": {},
                          "uuid": "40086361-d9da-49cf-a60a-3216c13f941e",
                          "parentUUID": "aad762bb-5036-4e6d-9785-666c679f2436",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow pausing if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Pausing Related Transitions should not allow pausing if not admin",
                          "timedOut": false,
                          "duration": 336,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "exceptionCode = 'Int32 -1';\nconst receipt = await treasury_api.unpauseContract();       //make sure it is unpaused first\nexpect(receipt.success).to.be.true;\n\nawait treasury_api.setSigningAddress(nonAdminPrivateKey)    // change txn signer to non adming...\nconst receipt2 = await treasury_api.pauseContract();        // ...and attempt to pause\n\ncheckException(receipt2, exceptionCode);\nexpect(receipt2.success).to.be.false;                       // txn should have failed",
                          "err": {},
                          "uuid": "3c58e61f-2a4f-4e2f-b6eb-0d5fc16d14ad",
                          "parentUUID": "aad762bb-5036-4e6d-9785-666c679f2436",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "759957f3-b2f6-466f-abca-090c82cd9f20",
                        "3ecfd990-932e-4fc2-a6db-e605bb3f0330",
                        "40086361-d9da-49cf-a60a-3216c13f941e",
                        "3c58e61f-2a4f-4e2f-b6eb-0d5fc16d14ad"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 936,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "28a61270-3a71-47c8-aabb-bdf94e2a38a8",
                      "title": "Admin Related Transitions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow admin to change admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should allow admin to change admin",
                          "timedOut": false,
                          "duration": 505,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// test invalid address fails\n          const receipt1 = await treasury_api.changeAdmin(\"InvalidAddress\");\n          expect(receipt1.success).to.be.false;\n          // test valid address succeeds\n          const receipt2 = await treasury_api.changeAdmin(nonAdminAddress);\n          expect(receipt2.success).to.be.true; \n          //reset back to original admin\n          await treasury_api.setSigningAddress(nonAdminPrivateKey)          \n          const receipt3 = await treasury_api.changeAdmin(adminAddress);\n          expect(receipt3.success).to.be.true;",
                          "err": {},
                          "uuid": "05d9eaec-c041-4d34-bc88-389bb7c5ef1f",
                          "parentUUID": "28a61270-3a71-47c8-aabb-bdf94e2a38a8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow changing admin if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should not allow changing admin if not admin",
                          "timedOut": false,
                          "duration": 160,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "exceptionCode = 'Int32 -1';          \n          await treasury_api.setSigningAddress(nonAdminPrivateKey)          // change txn signer to non admin...\n          const receipt2 = await treasury_api.changeAdmin(nonAdminAddress); // ...and attempt to change admin\n          //console.log(receipt2);\n          checkException(receipt2, exceptionCode);\n          \n          expect(receipt2.success).to.be.false;                             // txn should have failed",
                          "err": {},
                          "uuid": "d39d75fd-de55-4987-86f8-1a85547d65d3",
                          "parentUUID": "28a61270-3a71-47c8-aabb-bdf94e2a38a8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow admin to change company",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should allow admin to change company",
                          "timedOut": false,
                          "duration": 172,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const receipt = await treasury_api.changeCompany(nonAdminAddress);\n//console.log(receipt);\nexpect(receipt.success).to.be.true;\n//need to confirm that company address has been set correctly.\nconst contractCompanyAddress = await treasury_api.getCompany();\n//console.log(contractCompanyAddress);\nexpect(contractCompanyAddress).to.equal(nonAdminAddress);",
                          "err": {},
                          "uuid": "eba34d79-2e7c-46d4-8733-5e92c7ea4d52",
                          "parentUUID": "28a61270-3a71-47c8-aabb-bdf94e2a38a8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow changing company if not admin",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Admin Related Transitions should not allow changing company if not admin",
                          "timedOut": false,
                          "duration": 207,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "exceptionCode = 'Int32 -1';          \nawait treasury_api.setSigningAddress(nonAdminPrivateKey)          // change txn signer to non admin...\nconst receipt = await treasury_api.changeCompany(nonAdminAddress); // ...and attempt to change admin\ncheckException(receipt, exceptionCode);\n\nexpect(receipt.success).to.be.false;                             // txn should have failed",
                          "err": {},
                          "uuid": "03331f1a-391f-4aa6-a9bd-0b29425cacab",
                          "parentUUID": "28a61270-3a71-47c8-aabb-bdf94e2a38a8",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "05d9eaec-c041-4d34-bc88-389bb7c5ef1f",
                        "d39d75fd-de55-4987-86f8-1a85547d65d3",
                        "eba34d79-2e7c-46d4-8733-5e92c7ea4d52",
                        "03331f1a-391f-4aa6-a9bd-0b29425cacab"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1044,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "45850d67-28b8-49b7-908d-72fb022aee02",
                      "title": "Internal Functions",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should recalculate exchange rates when receiving ZIL that is not for buying tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Internal Functions should recalculate exchange rates when receiving ZIL that is not for buying tokens",
                          "timedOut": false,
                          "duration": 63,
                          "state": "failed",
                          "speed": null,
                          "pass": false,
                          "fail": true,
                          "pending": false,
                          "context": null,
                          "code": "zilBalance = await treasury_api.getZilBalance();\ntokenBalance = await treasury_api.getTokenBalance();\nzilPrice = await treasury_api.getZilPrice();\ntokenPrice = await treasury_api.getTokenPrice();\nif(debugMode) {\n  console.log(\"Zil: \", zilBalance);\n  console.log(\"Tokens: \", tokenBalance);\n  console.log(\"Zil Price: \", zilPrice);\n  console.log(\"Token Price: \", tokenPrice);\n}\nexpect(true).to.be.false;",
                          "err": {
                            "message": "AssertionError: expected true to be false",
                            "estack": "AssertionError: expected true to be false\n    at Context.<anonymous> (test/treasury.js:308:31)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                            "diff": "- true\n+ false\n"
                          },
                          "uuid": "86553f44-240e-41ad-bec3-7dff8f9beb8f",
                          "parentUUID": "45850d67-28b8-49b7-908d-72fb022aee02",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should recalculate exchange rates when receiving TOKENS that is not for paying invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Internal Functions should recalculate exchange rates when receiving TOKENS that is not for paying invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "2c77ffcb-00e1-4598-a90d-c610a2ddf1a8",
                          "parentUUID": "45850d67-28b8-49b7-908d-72fb022aee02",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [
                        "86553f44-240e-41ad-bec3-7dff8f9beb8f"
                      ],
                      "pending": [
                        "2c77ffcb-00e1-4598-a90d-c610a2ddf1a8"
                      ],
                      "skipped": [],
                      "duration": 63,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "fc67b015-c072-4ac5-a118-f8dea062b306",
                      "title": "Trading Features",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should not allow buying of tokens when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow buying of tokens when paused",
                          "timedOut": false,
                          "duration": 287,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "//pause it first\n          const receipt2 = await treasury_api.pauseContract(); \n          expect(receipt2.success).to.be.true;\n          const zil_amount_BN = units.toQa(5, units.Units.Zil);\n          const receipt = await treasury_api.buyTokens(zil_amount_BN);\n          //check error is due to being 'paused'\n          exceptionCode = 'Int32 -5'\n          checkException(receipt, exceptionCode);\n          expect(receipt.success).to.be.false;",
                          "err": {},
                          "uuid": "fa0cbfac-25d8-4aea-b4bb-3114a07e7a24",
                          "parentUUID": "fc67b015-c072-4ac5-a118-f8dea062b306",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow selling of tokens when paused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow selling of tokens when paused",
                          "timedOut": false,
                          "duration": 285,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "//pause it first\nconst receipt2 = await treasury_api.pauseContract(); \nexpect(receipt2.success).to.be.true;\n//const zil_amount_BN = units.toQa(5, units.Units.Zil);\nconst receipt = await treasury_api.sellTokens();\n//check error is due to being 'paused'\nexceptionCode = 'Int32 -5'\ncheckException(receipt, exceptionCode);\n//console.log(receipt);\nexpect(receipt.success).to.be.false;",
                          "err": {},
                          "uuid": "1c08915e-08d5-44b2-ad66-74bbf23e18ef",
                          "parentUUID": "fc67b015-c072-4ac5-a118-f8dea062b306",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow buying of tokens when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should allow buying of tokens when unpaused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "efac7142-29d0-46a8-9e23-577ebc59903a",
                          "parentUUID": "fc67b015-c072-4ac5-a118-f8dea062b306",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow selling of tokens when unpaused",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should allow selling of tokens when unpaused",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "9f76258e-6f44-4e5f-aae5-c058ea220336",
                          "parentUUID": "fc67b015-c072-4ac5-a118-f8dea062b306",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow selling more tokens than you have",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should not allow selling more tokens than you have",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "42fff9d8-c141-4383-a759-37c7c5badf81",
                          "parentUUID": "fc67b015-c072-4ac5-a118-f8dea062b306",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should issue correct amount of tokens when buying tokens with 1 ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should issue correct amount of tokens when buying tokens with 1 ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "3d0913e3-be6f-4711-92df-a15e72a0ece0",
                          "parentUUID": "fc67b015-c072-4ac5-a118-f8dea062b306",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should send the correct amount of ZIL to you after selling tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Trading Features should send the correct amount of ZIL to you after selling tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "f1647538-8209-428f-8675-4d16b55545bf",
                          "parentUUID": "fc67b015-c072-4ac5-a118-f8dea062b306",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "fa0cbfac-25d8-4aea-b4bb-3114a07e7a24",
                        "1c08915e-08d5-44b2-ad66-74bbf23e18ef"
                      ],
                      "failures": [],
                      "pending": [
                        "efac7142-29d0-46a8-9e23-577ebc59903a",
                        "9f76258e-6f44-4e5f-aae5-c058ea220336",
                        "42fff9d8-c141-4383-a759-37c7c5badf81",
                        "3d0913e3-be6f-4711-92df-a15e72a0ece0",
                        "f1647538-8209-428f-8675-4d16b55545bf"
                      ],
                      "skipped": [],
                      "duration": 572,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    },
                    {
                      "uuid": "8a2d3f86-5198-4c5d-b17a-55edab25123b",
                      "title": "Invoicing Features",
                      "fullFile": "/Users/adam/OFFICE/CRYPTO/GenesysLabs/Treasury/test/treasury.js",
                      "file": "/test/treasury.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow creating new invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow creating new invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "9517231e-2066-4d37-902c-103bc2d9a576",
                          "parentUUID": "8a2d3f86-5198-4c5d-b17a-55edab25123b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should only allow admin to cancel an invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should only allow admin to cancel an invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "85d99adc-583e-42c9-bb00-bf74a9ead194",
                          "parentUUID": "8a2d3f86-5198-4c5d-b17a-55edab25123b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should error when trying to cancel an invoice that does not exist",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should error when trying to cancel an invoice that does not exist",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "f8238aaf-ce58-4253-b2fc-d8284b924110",
                          "parentUUID": "8a2d3f86-5198-4c5d-b17a-55edab25123b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be partially paid with tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be partially paid with tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "1ee782a5-29c3-4a62-b2d0-b79d1dbf41a7",
                          "parentUUID": "8a2d3f86-5198-4c5d-b17a-55edab25123b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be paid in full with tokens",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be paid in full with tokens",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "0848a3b7-0982-4e93-a717-f03141d9b7a8",
                          "parentUUID": "8a2d3f86-5198-4c5d-b17a-55edab25123b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be partially paid with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be partially paid with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "b42fecd3-918c-4916-89d0-1ae1b7ea8a8a",
                          "parentUUID": "8a2d3f86-5198-4c5d-b17a-55edab25123b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be paid in full with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be paid in full with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "86bfa3c3-08e8-4db3-9fb9-be3d1659bab1",
                          "parentUUID": "8a2d3f86-5198-4c5d-b17a-55edab25123b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be partially paid with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be partially paid with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "38f367f5-67f9-4c8b-8396-bb1b2007b2e4",
                          "parentUUID": "8a2d3f86-5198-4c5d-b17a-55edab25123b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be paid in full with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be paid in full with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "41f75e15-59c7-4ae9-b751-a314f7de3ead",
                          "parentUUID": "8a2d3f86-5198-4c5d-b17a-55edab25123b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should issue new tokens if invoice is overpaid with ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should issue new tokens if invoice is overpaid with ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "a4a15031-b1a8-46ca-a515-2c8a1d16dfb1",
                          "parentUUID": "8a2d3f86-5198-4c5d-b17a-55edab25123b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an invoice to be overpaid with combination of tokens and ZIL",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow an invoice to be overpaid with combination of tokens and ZIL",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "662f31d9-d981-484f-8168-ac26bb7a1c08",
                          "parentUUID": "8a2d3f86-5198-4c5d-b17a-55edab25123b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow multiple payments against an invoice",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should allow multiple payments against an invoice",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "97cbf5d3-24be-4aa0-9f41-c1e065b369c8",
                          "parentUUID": "8a2d3f86-5198-4c5d-b17a-55edab25123b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should only consume the correct amount of tokens when invoice is overpaid",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should only consume the correct amount of tokens when invoice is overpaid",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "5b86f5f6-bc3d-442a-b343-63bf4e1c1436",
                          "parentUUID": "8a2d3f86-5198-4c5d-b17a-55edab25123b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow payments against fully paid invoices",
                          "fullTitle": "Treasury Smart Contract Tests Contract Tests Management Functions Invoicing Features should not allow payments against fully paid invoices",
                          "timedOut": false,
                          "duration": 0,
                          "state": "pending",
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": true,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "9f24a1ca-f217-4692-ba72-7add007d8276",
                          "parentUUID": "8a2d3f86-5198-4c5d-b17a-55edab25123b",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [],
                      "failures": [],
                      "pending": [
                        "9517231e-2066-4d37-902c-103bc2d9a576",
                        "85d99adc-583e-42c9-bb00-bf74a9ead194",
                        "f8238aaf-ce58-4253-b2fc-d8284b924110",
                        "1ee782a5-29c3-4a62-b2d0-b79d1dbf41a7",
                        "0848a3b7-0982-4e93-a717-f03141d9b7a8",
                        "b42fecd3-918c-4916-89d0-1ae1b7ea8a8a",
                        "86bfa3c3-08e8-4db3-9fb9-be3d1659bab1",
                        "38f367f5-67f9-4c8b-8396-bb1b2007b2e4",
                        "41f75e15-59c7-4ae9-b751-a314f7de3ead",
                        "a4a15031-b1a8-46ca-a515-2c8a1d16dfb1",
                        "662f31d9-d981-484f-8168-ac26bb7a1c08",
                        "97cbf5d3-24be-4aa0-9f41-c1e065b369c8",
                        "5b86f5f6-bc3d-442a-b343-63bf4e1c1436",
                        "9f24a1ca-f217-4692-ba72-7add007d8276"
                      ],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 100000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 100000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 100000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "quiet": "true",
        "reportFilename": "index"
      },
      "version": "5.1.0"
    }
  }
}