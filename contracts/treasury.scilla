scilla_version 0

(***************************************************)
(*               Library                           *)
(***************************************************)

library TreasuryLib

let one_msg =
  fun (msg: Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg



(***************************************************)
(*             Contract                            *)
(***************************************************)

contract Treasury

(* Immutable fields declaration *)
(
    init_owner : ByStr20,
    proxy_address : ByStr20
)

(* Mutable fields declaration *)

field owner : ByStr20 = init_owner

(*---------------*)
(*  PROCEDURES   *)
(*---------------*)
procedure distributeTokens() end    (* Alternative to minting for preminted tokens *)
procedure lockTokensInVault() end   (* Alternative to burning - puts tokens back into treasury vault *)

(*---------------*)
(*  TRANSITIONS  *)
(*---------------*)
transition buyTokens() end
transition sellTokens() end

(* Accept all ZRC-2 Tokens *)
transition RecipientAcceptTransfer (sender : ByStr20, recipient : ByStr20, amount : Uint128)

end

transition Transfer(to : ByStr20,  amount : Uint128, tokenAddress : ByStr20)
  msg = {_tag: "Transfer"; _recipient: tokenAddress; _amount: Uint128 0; to: to; amount: amount};
  msgs = one_msg msg;
  send msgs
end

transition TransferSuccessCallBack (sender : ByStr20, recipient : ByStr20, amount : Uint128)

end